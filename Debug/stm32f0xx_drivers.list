
stm32f0xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000007b4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000874  0800087c  0001087c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000874  08000874  0001087c  2**0
                  CONTENTS
  4 .ARM          00000000  08000874  08000874  0001087c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000874  0800087c  0001087c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000874  08000874  00010874  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000878  08000878  00010878  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001087c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  0800087c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  0800087c  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0001087c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000008c3  00000000  00000000  000108a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000026e  00000000  00000000  00011167  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000000c8  00000000  00000000  000113d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000000a0  00000000  00000000  000114a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00001337  00000000  00000000  00011540  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00000a6b  00000000  00000000  00012877  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000050d7  00000000  00000000  000132e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000183b9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000022c  00000000  00000000  00018434  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000000 	.word	0x20000000
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800085c 	.word	0x0800085c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000004 	.word	0x20000004
 8000104:	0800085c 	.word	0x0800085c

08000108 <GPIO_PeriClockControl>:
 *  @note 					- none
 *
 */

void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnOrDi)
{
 8000108:	b580      	push	{r7, lr}
 800010a:	b082      	sub	sp, #8
 800010c:	af00      	add	r7, sp, #0
 800010e:	6078      	str	r0, [r7, #4]
 8000110:	000a      	movs	r2, r1
 8000112:	1cfb      	adds	r3, r7, #3
 8000114:	701a      	strb	r2, [r3, #0]
	if (EnOrDi == ENABLE) {
 8000116:	1cfb      	adds	r3, r7, #3
 8000118:	781b      	ldrb	r3, [r3, #0]
 800011a:	2b01      	cmp	r3, #1
 800011c:	d148      	bne.n	80001b0 <GPIO_PeriClockControl+0xa8>
		if (pGPIOx == GPIOA) {
 800011e:	687a      	ldr	r2, [r7, #4]
 8000120:	2390      	movs	r3, #144	; 0x90
 8000122:	05db      	lsls	r3, r3, #23
 8000124:	429a      	cmp	r2, r3
 8000126:	d107      	bne.n	8000138 <GPIO_PeriClockControl+0x30>
			GPIOA_PCLK_EN();
 8000128:	4b44      	ldr	r3, [pc, #272]	; (800023c <GPIO_PeriClockControl+0x134>)
 800012a:	695a      	ldr	r2, [r3, #20]
 800012c:	4b43      	ldr	r3, [pc, #268]	; (800023c <GPIO_PeriClockControl+0x134>)
 800012e:	2180      	movs	r1, #128	; 0x80
 8000130:	0289      	lsls	r1, r1, #10
 8000132:	430a      	orrs	r2, r1
 8000134:	615a      	str	r2, [r3, #20]
			GPIOE_PCLK_DI();
		} else if (pGPIOx == GPIOF) {
			GPIOF_PCLK_DI();
		}
	}
}
 8000136:	e07d      	b.n	8000234 <GPIO_PeriClockControl+0x12c>
		} else if (pGPIOx == GPIOB) {
 8000138:	687b      	ldr	r3, [r7, #4]
 800013a:	4a41      	ldr	r2, [pc, #260]	; (8000240 <GPIO_PeriClockControl+0x138>)
 800013c:	4293      	cmp	r3, r2
 800013e:	d107      	bne.n	8000150 <GPIO_PeriClockControl+0x48>
			GPIOB_PCLK_EN();
 8000140:	4b3e      	ldr	r3, [pc, #248]	; (800023c <GPIO_PeriClockControl+0x134>)
 8000142:	695a      	ldr	r2, [r3, #20]
 8000144:	4b3d      	ldr	r3, [pc, #244]	; (800023c <GPIO_PeriClockControl+0x134>)
 8000146:	2180      	movs	r1, #128	; 0x80
 8000148:	02c9      	lsls	r1, r1, #11
 800014a:	430a      	orrs	r2, r1
 800014c:	615a      	str	r2, [r3, #20]
}
 800014e:	e071      	b.n	8000234 <GPIO_PeriClockControl+0x12c>
		} else if (pGPIOx == GPIOC) {
 8000150:	687b      	ldr	r3, [r7, #4]
 8000152:	4a3c      	ldr	r2, [pc, #240]	; (8000244 <GPIO_PeriClockControl+0x13c>)
 8000154:	4293      	cmp	r3, r2
 8000156:	d107      	bne.n	8000168 <GPIO_PeriClockControl+0x60>
			GPIOC_PCLK_EN();
 8000158:	4b38      	ldr	r3, [pc, #224]	; (800023c <GPIO_PeriClockControl+0x134>)
 800015a:	695a      	ldr	r2, [r3, #20]
 800015c:	4b37      	ldr	r3, [pc, #220]	; (800023c <GPIO_PeriClockControl+0x134>)
 800015e:	2180      	movs	r1, #128	; 0x80
 8000160:	0309      	lsls	r1, r1, #12
 8000162:	430a      	orrs	r2, r1
 8000164:	615a      	str	r2, [r3, #20]
}
 8000166:	e065      	b.n	8000234 <GPIO_PeriClockControl+0x12c>
		} else if (pGPIOx == GPIOD) {
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	4a37      	ldr	r2, [pc, #220]	; (8000248 <GPIO_PeriClockControl+0x140>)
 800016c:	4293      	cmp	r3, r2
 800016e:	d107      	bne.n	8000180 <GPIO_PeriClockControl+0x78>
			GPIOD_PCLK_EN();
 8000170:	4b32      	ldr	r3, [pc, #200]	; (800023c <GPIO_PeriClockControl+0x134>)
 8000172:	695a      	ldr	r2, [r3, #20]
 8000174:	4b31      	ldr	r3, [pc, #196]	; (800023c <GPIO_PeriClockControl+0x134>)
 8000176:	2180      	movs	r1, #128	; 0x80
 8000178:	0349      	lsls	r1, r1, #13
 800017a:	430a      	orrs	r2, r1
 800017c:	615a      	str	r2, [r3, #20]
}
 800017e:	e059      	b.n	8000234 <GPIO_PeriClockControl+0x12c>
		} else if (pGPIOx == GPIOE) {
 8000180:	687b      	ldr	r3, [r7, #4]
 8000182:	4a32      	ldr	r2, [pc, #200]	; (800024c <GPIO_PeriClockControl+0x144>)
 8000184:	4293      	cmp	r3, r2
 8000186:	d107      	bne.n	8000198 <GPIO_PeriClockControl+0x90>
			GPIOE_PCLK_EN();
 8000188:	4b2c      	ldr	r3, [pc, #176]	; (800023c <GPIO_PeriClockControl+0x134>)
 800018a:	695a      	ldr	r2, [r3, #20]
 800018c:	4b2b      	ldr	r3, [pc, #172]	; (800023c <GPIO_PeriClockControl+0x134>)
 800018e:	2180      	movs	r1, #128	; 0x80
 8000190:	0389      	lsls	r1, r1, #14
 8000192:	430a      	orrs	r2, r1
 8000194:	615a      	str	r2, [r3, #20]
}
 8000196:	e04d      	b.n	8000234 <GPIO_PeriClockControl+0x12c>
		} else if (pGPIOx == GPIOF) {
 8000198:	687b      	ldr	r3, [r7, #4]
 800019a:	4a2d      	ldr	r2, [pc, #180]	; (8000250 <GPIO_PeriClockControl+0x148>)
 800019c:	4293      	cmp	r3, r2
 800019e:	d149      	bne.n	8000234 <GPIO_PeriClockControl+0x12c>
			GPIOF_PCLK_EN();
 80001a0:	4b26      	ldr	r3, [pc, #152]	; (800023c <GPIO_PeriClockControl+0x134>)
 80001a2:	695a      	ldr	r2, [r3, #20]
 80001a4:	4b25      	ldr	r3, [pc, #148]	; (800023c <GPIO_PeriClockControl+0x134>)
 80001a6:	2180      	movs	r1, #128	; 0x80
 80001a8:	03c9      	lsls	r1, r1, #15
 80001aa:	430a      	orrs	r2, r1
 80001ac:	615a      	str	r2, [r3, #20]
}
 80001ae:	e041      	b.n	8000234 <GPIO_PeriClockControl+0x12c>
		if (pGPIOx == GPIOA) {
 80001b0:	687a      	ldr	r2, [r7, #4]
 80001b2:	2390      	movs	r3, #144	; 0x90
 80001b4:	05db      	lsls	r3, r3, #23
 80001b6:	429a      	cmp	r2, r3
 80001b8:	d106      	bne.n	80001c8 <GPIO_PeriClockControl+0xc0>
			GPIOA_PCLK_DI();
 80001ba:	4b20      	ldr	r3, [pc, #128]	; (800023c <GPIO_PeriClockControl+0x134>)
 80001bc:	695a      	ldr	r2, [r3, #20]
 80001be:	4b1f      	ldr	r3, [pc, #124]	; (800023c <GPIO_PeriClockControl+0x134>)
 80001c0:	4924      	ldr	r1, [pc, #144]	; (8000254 <GPIO_PeriClockControl+0x14c>)
 80001c2:	400a      	ands	r2, r1
 80001c4:	615a      	str	r2, [r3, #20]
}
 80001c6:	e035      	b.n	8000234 <GPIO_PeriClockControl+0x12c>
		} else if (pGPIOx == GPIOB) {
 80001c8:	687b      	ldr	r3, [r7, #4]
 80001ca:	4a1d      	ldr	r2, [pc, #116]	; (8000240 <GPIO_PeriClockControl+0x138>)
 80001cc:	4293      	cmp	r3, r2
 80001ce:	d106      	bne.n	80001de <GPIO_PeriClockControl+0xd6>
			GPIOB_PCLK_DI();
 80001d0:	4b1a      	ldr	r3, [pc, #104]	; (800023c <GPIO_PeriClockControl+0x134>)
 80001d2:	695a      	ldr	r2, [r3, #20]
 80001d4:	4b19      	ldr	r3, [pc, #100]	; (800023c <GPIO_PeriClockControl+0x134>)
 80001d6:	4920      	ldr	r1, [pc, #128]	; (8000258 <GPIO_PeriClockControl+0x150>)
 80001d8:	400a      	ands	r2, r1
 80001da:	615a      	str	r2, [r3, #20]
}
 80001dc:	e02a      	b.n	8000234 <GPIO_PeriClockControl+0x12c>
		} else if (pGPIOx == GPIOC) {
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	4a18      	ldr	r2, [pc, #96]	; (8000244 <GPIO_PeriClockControl+0x13c>)
 80001e2:	4293      	cmp	r3, r2
 80001e4:	d106      	bne.n	80001f4 <GPIO_PeriClockControl+0xec>
			GPIOC_PCLK_DI();
 80001e6:	4b15      	ldr	r3, [pc, #84]	; (800023c <GPIO_PeriClockControl+0x134>)
 80001e8:	695a      	ldr	r2, [r3, #20]
 80001ea:	4b14      	ldr	r3, [pc, #80]	; (800023c <GPIO_PeriClockControl+0x134>)
 80001ec:	491b      	ldr	r1, [pc, #108]	; (800025c <GPIO_PeriClockControl+0x154>)
 80001ee:	400a      	ands	r2, r1
 80001f0:	615a      	str	r2, [r3, #20]
}
 80001f2:	e01f      	b.n	8000234 <GPIO_PeriClockControl+0x12c>
		} else if (pGPIOx == GPIOD) {
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	4a14      	ldr	r2, [pc, #80]	; (8000248 <GPIO_PeriClockControl+0x140>)
 80001f8:	4293      	cmp	r3, r2
 80001fa:	d106      	bne.n	800020a <GPIO_PeriClockControl+0x102>
			GPIOD_PCLK_DI();
 80001fc:	4b0f      	ldr	r3, [pc, #60]	; (800023c <GPIO_PeriClockControl+0x134>)
 80001fe:	695a      	ldr	r2, [r3, #20]
 8000200:	4b0e      	ldr	r3, [pc, #56]	; (800023c <GPIO_PeriClockControl+0x134>)
 8000202:	4917      	ldr	r1, [pc, #92]	; (8000260 <GPIO_PeriClockControl+0x158>)
 8000204:	400a      	ands	r2, r1
 8000206:	615a      	str	r2, [r3, #20]
}
 8000208:	e014      	b.n	8000234 <GPIO_PeriClockControl+0x12c>
		} else if (pGPIOx == GPIOE) {
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	4a0f      	ldr	r2, [pc, #60]	; (800024c <GPIO_PeriClockControl+0x144>)
 800020e:	4293      	cmp	r3, r2
 8000210:	d106      	bne.n	8000220 <GPIO_PeriClockControl+0x118>
			GPIOE_PCLK_DI();
 8000212:	4b0a      	ldr	r3, [pc, #40]	; (800023c <GPIO_PeriClockControl+0x134>)
 8000214:	695a      	ldr	r2, [r3, #20]
 8000216:	4b09      	ldr	r3, [pc, #36]	; (800023c <GPIO_PeriClockControl+0x134>)
 8000218:	4912      	ldr	r1, [pc, #72]	; (8000264 <GPIO_PeriClockControl+0x15c>)
 800021a:	400a      	ands	r2, r1
 800021c:	615a      	str	r2, [r3, #20]
}
 800021e:	e009      	b.n	8000234 <GPIO_PeriClockControl+0x12c>
		} else if (pGPIOx == GPIOF) {
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	4a0b      	ldr	r2, [pc, #44]	; (8000250 <GPIO_PeriClockControl+0x148>)
 8000224:	4293      	cmp	r3, r2
 8000226:	d105      	bne.n	8000234 <GPIO_PeriClockControl+0x12c>
			GPIOF_PCLK_DI();
 8000228:	4b04      	ldr	r3, [pc, #16]	; (800023c <GPIO_PeriClockControl+0x134>)
 800022a:	695a      	ldr	r2, [r3, #20]
 800022c:	4b03      	ldr	r3, [pc, #12]	; (800023c <GPIO_PeriClockControl+0x134>)
 800022e:	490e      	ldr	r1, [pc, #56]	; (8000268 <GPIO_PeriClockControl+0x160>)
 8000230:	400a      	ands	r2, r1
 8000232:	615a      	str	r2, [r3, #20]
}
 8000234:	46c0      	nop			; (mov r8, r8)
 8000236:	46bd      	mov	sp, r7
 8000238:	b002      	add	sp, #8
 800023a:	bd80      	pop	{r7, pc}
 800023c:	40021000 	.word	0x40021000
 8000240:	48000400 	.word	0x48000400
 8000244:	48000800 	.word	0x48000800
 8000248:	48000c00 	.word	0x48000c00
 800024c:	48001000 	.word	0x48001000
 8000250:	48001400 	.word	0x48001400
 8000254:	fffdffff 	.word	0xfffdffff
 8000258:	fffbffff 	.word	0xfffbffff
 800025c:	fff7ffff 	.word	0xfff7ffff
 8000260:	ffefffff 	.word	0xffefffff
 8000264:	ffdfffff 	.word	0xffdfffff
 8000268:	ffbfffff 	.word	0xffbfffff

0800026c <GPIO_Init>:
 *
 *  @note 					- none
 *
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 800026c:	b5b0      	push	{r4, r5, r7, lr}
 800026e:	b086      	sub	sp, #24
 8000270:	af00      	add	r7, sp, #0
 8000272:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0;
 8000274:	2300      	movs	r3, #0
 8000276:	617b      	str	r3, [r7, #20]

	// 1. Configure the mode of GPIO pin
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	795b      	ldrb	r3, [r3, #5]
 800027c:	2b03      	cmp	r3, #3
 800027e:	d81f      	bhi.n	80002c0 <GPIO_Init+0x54>
	{
		// the non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	795b      	ldrb	r3, [r3, #5]
 8000284:	001a      	movs	r2, r3
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	791b      	ldrb	r3, [r3, #4]
 800028a:	005b      	lsls	r3, r3, #1
 800028c:	409a      	lsls	r2, r3
 800028e:	0013      	movs	r3, r2
 8000290:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	681a      	ldr	r2, [r3, #0]
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	791b      	ldrb	r3, [r3, #4]
 800029c:	0019      	movs	r1, r3
 800029e:	2303      	movs	r3, #3
 80002a0:	408b      	lsls	r3, r1
 80002a2:	43db      	mvns	r3, r3
 80002a4:	0019      	movs	r1, r3
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	681b      	ldr	r3, [r3, #0]
 80002aa:	400a      	ands	r2, r1
 80002ac:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	6819      	ldr	r1, [r3, #0]
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	697a      	ldr	r2, [r7, #20]
 80002ba:	430a      	orrs	r2, r1
 80002bc:	601a      	str	r2, [r3, #0]
 80002be:	e0b5      	b.n	800042c <GPIO_Init+0x1c0>
	}
	else
	{
		if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	795b      	ldrb	r3, [r3, #5]
 80002c4:	2b04      	cmp	r3, #4
 80002c6:	d117      	bne.n	80002f8 <GPIO_Init+0x8c>
		{
			// 1. Configure FTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80002c8:	4bad      	ldr	r3, [pc, #692]	; (8000580 <GPIO_Init+0x314>)
 80002ca:	68da      	ldr	r2, [r3, #12]
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	791b      	ldrb	r3, [r3, #4]
 80002d0:	0019      	movs	r1, r3
 80002d2:	2301      	movs	r3, #1
 80002d4:	408b      	lsls	r3, r1
 80002d6:	0019      	movs	r1, r3
 80002d8:	4ba9      	ldr	r3, [pc, #676]	; (8000580 <GPIO_Init+0x314>)
 80002da:	430a      	orrs	r2, r1
 80002dc:	60da      	str	r2, [r3, #12]
			// 1.1 But clean Rising TSR
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80002de:	4ba8      	ldr	r3, [pc, #672]	; (8000580 <GPIO_Init+0x314>)
 80002e0:	689a      	ldr	r2, [r3, #8]
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	791b      	ldrb	r3, [r3, #4]
 80002e6:	0019      	movs	r1, r3
 80002e8:	2301      	movs	r3, #1
 80002ea:	408b      	lsls	r3, r1
 80002ec:	43db      	mvns	r3, r3
 80002ee:	0019      	movs	r1, r3
 80002f0:	4ba3      	ldr	r3, [pc, #652]	; (8000580 <GPIO_Init+0x314>)
 80002f2:	400a      	ands	r2, r1
 80002f4:	609a      	str	r2, [r3, #8]
 80002f6:	e035      	b.n	8000364 <GPIO_Init+0xf8>
		}
		else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	795b      	ldrb	r3, [r3, #5]
 80002fc:	2b05      	cmp	r3, #5
 80002fe:	d117      	bne.n	8000330 <GPIO_Init+0xc4>
		{
			// 1. Configure RTSR
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000300:	4b9f      	ldr	r3, [pc, #636]	; (8000580 <GPIO_Init+0x314>)
 8000302:	689a      	ldr	r2, [r3, #8]
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	791b      	ldrb	r3, [r3, #4]
 8000308:	0019      	movs	r1, r3
 800030a:	2301      	movs	r3, #1
 800030c:	408b      	lsls	r3, r1
 800030e:	0019      	movs	r1, r3
 8000310:	4b9b      	ldr	r3, [pc, #620]	; (8000580 <GPIO_Init+0x314>)
 8000312:	430a      	orrs	r2, r1
 8000314:	609a      	str	r2, [r3, #8]
			// 1.1 But clean Falling TSR
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000316:	4b9a      	ldr	r3, [pc, #616]	; (8000580 <GPIO_Init+0x314>)
 8000318:	68da      	ldr	r2, [r3, #12]
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	791b      	ldrb	r3, [r3, #4]
 800031e:	0019      	movs	r1, r3
 8000320:	2301      	movs	r3, #1
 8000322:	408b      	lsls	r3, r1
 8000324:	43db      	mvns	r3, r3
 8000326:	0019      	movs	r1, r3
 8000328:	4b95      	ldr	r3, [pc, #596]	; (8000580 <GPIO_Init+0x314>)
 800032a:	400a      	ands	r2, r1
 800032c:	60da      	str	r2, [r3, #12]
 800032e:	e019      	b.n	8000364 <GPIO_Init+0xf8>
		}
		else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	795b      	ldrb	r3, [r3, #5]
 8000334:	2b06      	cmp	r3, #6
 8000336:	d115      	bne.n	8000364 <GPIO_Init+0xf8>
		{
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000338:	4b91      	ldr	r3, [pc, #580]	; (8000580 <GPIO_Init+0x314>)
 800033a:	68da      	ldr	r2, [r3, #12]
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	791b      	ldrb	r3, [r3, #4]
 8000340:	0019      	movs	r1, r3
 8000342:	2301      	movs	r3, #1
 8000344:	408b      	lsls	r3, r1
 8000346:	0019      	movs	r1, r3
 8000348:	4b8d      	ldr	r3, [pc, #564]	; (8000580 <GPIO_Init+0x314>)
 800034a:	430a      	orrs	r2, r1
 800034c:	60da      	str	r2, [r3, #12]
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800034e:	4b8c      	ldr	r3, [pc, #560]	; (8000580 <GPIO_Init+0x314>)
 8000350:	689a      	ldr	r2, [r3, #8]
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	791b      	ldrb	r3, [r3, #4]
 8000356:	0019      	movs	r1, r3
 8000358:	2301      	movs	r3, #1
 800035a:	408b      	lsls	r3, r1
 800035c:	0019      	movs	r1, r3
 800035e:	4b88      	ldr	r3, [pc, #544]	; (8000580 <GPIO_Init+0x314>)
 8000360:	430a      	orrs	r2, r1
 8000362:	609a      	str	r2, [r3, #8]
		}

		// 2. Configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	791a      	ldrb	r2, [r3, #4]
 8000368:	2313      	movs	r3, #19
 800036a:	18fb      	adds	r3, r7, r3
 800036c:	0892      	lsrs	r2, r2, #2
 800036e:	701a      	strb	r2, [r3, #0]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	791a      	ldrb	r2, [r3, #4]
 8000374:	2312      	movs	r3, #18
 8000376:	18fb      	adds	r3, r7, r3
 8000378:	2103      	movs	r1, #3
 800037a:	400a      	ands	r2, r1
 800037c:	701a      	strb	r2, [r3, #0]
		uint8_t portCode = GPIO_BASE_ADDR_TO_PORT_CODE(pGPIOHandle->pGPIOx);
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	681a      	ldr	r2, [r3, #0]
 8000382:	2390      	movs	r3, #144	; 0x90
 8000384:	05db      	lsls	r3, r3, #23
 8000386:	429a      	cmp	r2, r3
 8000388:	d024      	beq.n	80003d4 <GPIO_Init+0x168>
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	4a7d      	ldr	r2, [pc, #500]	; (8000584 <GPIO_Init+0x318>)
 8000390:	4293      	cmp	r3, r2
 8000392:	d01d      	beq.n	80003d0 <GPIO_Init+0x164>
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	4a7b      	ldr	r2, [pc, #492]	; (8000588 <GPIO_Init+0x31c>)
 800039a:	4293      	cmp	r3, r2
 800039c:	d016      	beq.n	80003cc <GPIO_Init+0x160>
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	4a7a      	ldr	r2, [pc, #488]	; (800058c <GPIO_Init+0x320>)
 80003a4:	4293      	cmp	r3, r2
 80003a6:	d00f      	beq.n	80003c8 <GPIO_Init+0x15c>
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	4a78      	ldr	r2, [pc, #480]	; (8000590 <GPIO_Init+0x324>)
 80003ae:	4293      	cmp	r3, r2
 80003b0:	d008      	beq.n	80003c4 <GPIO_Init+0x158>
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	4a77      	ldr	r2, [pc, #476]	; (8000594 <GPIO_Init+0x328>)
 80003b8:	4293      	cmp	r3, r2
 80003ba:	d101      	bne.n	80003c0 <GPIO_Init+0x154>
 80003bc:	2305      	movs	r3, #5
 80003be:	e00a      	b.n	80003d6 <GPIO_Init+0x16a>
 80003c0:	2300      	movs	r3, #0
 80003c2:	e008      	b.n	80003d6 <GPIO_Init+0x16a>
 80003c4:	2304      	movs	r3, #4
 80003c6:	e006      	b.n	80003d6 <GPIO_Init+0x16a>
 80003c8:	2303      	movs	r3, #3
 80003ca:	e004      	b.n	80003d6 <GPIO_Init+0x16a>
 80003cc:	2302      	movs	r3, #2
 80003ce:	e002      	b.n	80003d6 <GPIO_Init+0x16a>
 80003d0:	2301      	movs	r3, #1
 80003d2:	e000      	b.n	80003d6 <GPIO_Init+0x16a>
 80003d4:	2300      	movs	r3, #0
 80003d6:	2011      	movs	r0, #17
 80003d8:	183a      	adds	r2, r7, r0
 80003da:	7013      	strb	r3, [r2, #0]

		SYSCFG_PCLK_EN();
 80003dc:	4b6e      	ldr	r3, [pc, #440]	; (8000598 <GPIO_Init+0x32c>)
 80003de:	699a      	ldr	r2, [r3, #24]
 80003e0:	4b6d      	ldr	r3, [pc, #436]	; (8000598 <GPIO_Init+0x32c>)
 80003e2:	2101      	movs	r1, #1
 80003e4:	430a      	orrs	r2, r1
 80003e6:	619a      	str	r2, [r3, #24]
		SYSCFG->EXTICR[temp1] |= portCode << (4 * temp2);
 80003e8:	4a6c      	ldr	r2, [pc, #432]	; (800059c <GPIO_Init+0x330>)
 80003ea:	2413      	movs	r4, #19
 80003ec:	193b      	adds	r3, r7, r4
 80003ee:	781b      	ldrb	r3, [r3, #0]
 80003f0:	3302      	adds	r3, #2
 80003f2:	009b      	lsls	r3, r3, #2
 80003f4:	589a      	ldr	r2, [r3, r2]
 80003f6:	183b      	adds	r3, r7, r0
 80003f8:	7819      	ldrb	r1, [r3, #0]
 80003fa:	2312      	movs	r3, #18
 80003fc:	18fb      	adds	r3, r7, r3
 80003fe:	781b      	ldrb	r3, [r3, #0]
 8000400:	009b      	lsls	r3, r3, #2
 8000402:	4099      	lsls	r1, r3
 8000404:	000b      	movs	r3, r1
 8000406:	0018      	movs	r0, r3
 8000408:	4964      	ldr	r1, [pc, #400]	; (800059c <GPIO_Init+0x330>)
 800040a:	193b      	adds	r3, r7, r4
 800040c:	781b      	ldrb	r3, [r3, #0]
 800040e:	4302      	orrs	r2, r0
 8000410:	3302      	adds	r3, #2
 8000412:	009b      	lsls	r3, r3, #2
 8000414:	505a      	str	r2, [r3, r1]

		// 3. Enable the EXTI interrupt delivery using IMR
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000416:	4b5a      	ldr	r3, [pc, #360]	; (8000580 <GPIO_Init+0x314>)
 8000418:	681a      	ldr	r2, [r3, #0]
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	791b      	ldrb	r3, [r3, #4]
 800041e:	0019      	movs	r1, r3
 8000420:	2301      	movs	r3, #1
 8000422:	408b      	lsls	r3, r1
 8000424:	0019      	movs	r1, r3
 8000426:	4b56      	ldr	r3, [pc, #344]	; (8000580 <GPIO_Init+0x314>)
 8000428:	430a      	orrs	r2, r1
 800042a:	601a      	str	r2, [r3, #0]
	}

	temp = 0;
 800042c:	2300      	movs	r3, #0
 800042e:	617b      	str	r3, [r7, #20]

	// 2. Configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	799b      	ldrb	r3, [r3, #6]
 8000434:	001a      	movs	r2, r3
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	791b      	ldrb	r3, [r3, #4]
 800043a:	005b      	lsls	r3, r3, #1
 800043c:	409a      	lsls	r2, r3
 800043e:	0013      	movs	r3, r2
 8000440:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	689a      	ldr	r2, [r3, #8]
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	791b      	ldrb	r3, [r3, #4]
 800044c:	0019      	movs	r1, r3
 800044e:	2303      	movs	r3, #3
 8000450:	408b      	lsls	r3, r1
 8000452:	43db      	mvns	r3, r3
 8000454:	0019      	movs	r1, r3
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	400a      	ands	r2, r1
 800045c:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	6899      	ldr	r1, [r3, #8]
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	697a      	ldr	r2, [r7, #20]
 800046a:	430a      	orrs	r2, r1
 800046c:	609a      	str	r2, [r3, #8]

	temp = 0;
 800046e:	2300      	movs	r3, #0
 8000470:	617b      	str	r3, [r7, #20]

	// 3. Configure the PUPD settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	79db      	ldrb	r3, [r3, #7]
 8000476:	001a      	movs	r2, r3
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	791b      	ldrb	r3, [r3, #4]
 800047c:	005b      	lsls	r3, r3, #1
 800047e:	409a      	lsls	r2, r3
 8000480:	0013      	movs	r3, r2
 8000482:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	68da      	ldr	r2, [r3, #12]
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	791b      	ldrb	r3, [r3, #4]
 800048e:	0019      	movs	r1, r3
 8000490:	2303      	movs	r3, #3
 8000492:	408b      	lsls	r3, r1
 8000494:	43db      	mvns	r3, r3
 8000496:	0019      	movs	r1, r3
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	400a      	ands	r2, r1
 800049e:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	68d9      	ldr	r1, [r3, #12]
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	697a      	ldr	r2, [r7, #20]
 80004ac:	430a      	orrs	r2, r1
 80004ae:	60da      	str	r2, [r3, #12]

	temp = 0;
 80004b0:	2300      	movs	r3, #0
 80004b2:	617b      	str	r3, [r7, #20]

	// 4. Configure the opttype
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	7a1b      	ldrb	r3, [r3, #8]
 80004b8:	001a      	movs	r2, r3
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	791b      	ldrb	r3, [r3, #4]
 80004be:	409a      	lsls	r2, r3
 80004c0:	0013      	movs	r3, r2
 80004c2:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	685a      	ldr	r2, [r3, #4]
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	791b      	ldrb	r3, [r3, #4]
 80004ce:	0019      	movs	r1, r3
 80004d0:	2301      	movs	r3, #1
 80004d2:	408b      	lsls	r3, r1
 80004d4:	43db      	mvns	r3, r3
 80004d6:	0019      	movs	r1, r3
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	400a      	ands	r2, r1
 80004de:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	6859      	ldr	r1, [r3, #4]
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	697a      	ldr	r2, [r7, #20]
 80004ec:	430a      	orrs	r2, r1
 80004ee:	605a      	str	r2, [r3, #4]

	temp = 0;
 80004f0:	2300      	movs	r3, #0
 80004f2:	617b      	str	r3, [r7, #20]

	// 5. Configure the ALTERNATIVE functionality
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN) {
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	795b      	ldrb	r3, [r3, #5]
 80004f8:	2b02      	cmp	r3, #2
 80004fa:	d13b      	bne.n	8000574 <GPIO_Init+0x308>
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	791a      	ldrb	r2, [r3, #4]
 8000500:	2410      	movs	r4, #16
 8000502:	193b      	adds	r3, r7, r4
 8000504:	08d2      	lsrs	r2, r2, #3
 8000506:	701a      	strb	r2, [r3, #0]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	791a      	ldrb	r2, [r3, #4]
 800050c:	250f      	movs	r5, #15
 800050e:	197b      	adds	r3, r7, r5
 8000510:	2107      	movs	r1, #7
 8000512:	400a      	ands	r2, r1
 8000514:	701a      	strb	r2, [r3, #0]

		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2));
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	193a      	adds	r2, r7, r4
 800051c:	7812      	ldrb	r2, [r2, #0]
 800051e:	3208      	adds	r2, #8
 8000520:	0092      	lsls	r2, r2, #2
 8000522:	58d1      	ldr	r1, [r2, r3]
 8000524:	197b      	adds	r3, r7, r5
 8000526:	781b      	ldrb	r3, [r3, #0]
 8000528:	009b      	lsls	r3, r3, #2
 800052a:	220f      	movs	r2, #15
 800052c:	409a      	lsls	r2, r3
 800052e:	0013      	movs	r3, r2
 8000530:	43db      	mvns	r3, r3
 8000532:	0018      	movs	r0, r3
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	193a      	adds	r2, r7, r4
 800053a:	7812      	ldrb	r2, [r2, #0]
 800053c:	4001      	ands	r1, r0
 800053e:	3208      	adds	r2, #8
 8000540:	0092      	lsls	r2, r2, #2
 8000542:	50d1      	str	r1, [r2, r3]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2));
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	193a      	adds	r2, r7, r4
 800054a:	7812      	ldrb	r2, [r2, #0]
 800054c:	3208      	adds	r2, #8
 800054e:	0092      	lsls	r2, r2, #2
 8000550:	58d1      	ldr	r1, [r2, r3]
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	7a5b      	ldrb	r3, [r3, #9]
 8000556:	001a      	movs	r2, r3
 8000558:	197b      	adds	r3, r7, r5
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	009b      	lsls	r3, r3, #2
 800055e:	409a      	lsls	r2, r3
 8000560:	0013      	movs	r3, r2
 8000562:	0018      	movs	r0, r3
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	193a      	adds	r2, r7, r4
 800056a:	7812      	ldrb	r2, [r2, #0]
 800056c:	4301      	orrs	r1, r0
 800056e:	3208      	adds	r2, #8
 8000570:	0092      	lsls	r2, r2, #2
 8000572:	50d1      	str	r1, [r2, r3]
	}

	temp = 0;
 8000574:	2300      	movs	r3, #0
 8000576:	617b      	str	r3, [r7, #20]
}
 8000578:	46c0      	nop			; (mov r8, r8)
 800057a:	46bd      	mov	sp, r7
 800057c:	b006      	add	sp, #24
 800057e:	bdb0      	pop	{r4, r5, r7, pc}
 8000580:	40010400 	.word	0x40010400
 8000584:	48000400 	.word	0x48000400
 8000588:	48000800 	.word	0x48000800
 800058c:	48000c00 	.word	0x48000c00
 8000590:	48001000 	.word	0x48001000
 8000594:	48001400 	.word	0x48001400
 8000598:	40021000 	.word	0x40021000
 800059c:	40010000 	.word	0x40010000

080005a0 <GPIO_ToggleOutputPin>:
{
	pGPIOx->ODR = Value;
}

void GPIO_ToggleOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
 80005a8:	000a      	movs	r2, r1
 80005aa:	1cfb      	adds	r3, r7, #3
 80005ac:	701a      	strb	r2, [r3, #0]
	pGPIOx->ODR ^= (1 << PinNumber);
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	695b      	ldr	r3, [r3, #20]
 80005b2:	1cfa      	adds	r2, r7, #3
 80005b4:	7812      	ldrb	r2, [r2, #0]
 80005b6:	2101      	movs	r1, #1
 80005b8:	4091      	lsls	r1, r2
 80005ba:	000a      	movs	r2, r1
 80005bc:	405a      	eors	r2, r3
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	615a      	str	r2, [r3, #20]
}
 80005c2:	46c0      	nop			; (mov r8, r8)
 80005c4:	46bd      	mov	sp, r7
 80005c6:	b002      	add	sp, #8
 80005c8:	bd80      	pop	{r7, pc}
	...

080005cc <GPIO_IRQInterruptCongif>:
/*
 * IRQ Configuration and ISR handling
 */

void GPIO_IRQInterruptCongif(uint8_t IRQNumber, uint8_t EnOrDi)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	0002      	movs	r2, r0
 80005d4:	1dfb      	adds	r3, r7, #7
 80005d6:	701a      	strb	r2, [r3, #0]
 80005d8:	1dbb      	adds	r3, r7, #6
 80005da:	1c0a      	adds	r2, r1, #0
 80005dc:	701a      	strb	r2, [r3, #0]
	if (EnOrDi == ENABLE) {
 80005de:	1dbb      	adds	r3, r7, #6
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	2b01      	cmp	r3, #1
 80005e4:	d10b      	bne.n	80005fe <GPIO_IRQInterruptCongif+0x32>
		 // program ISER register (Interrupt Set-Enable Register)
		*NVIC_ISER |= (1 << IRQNumber);
 80005e6:	4b0d      	ldr	r3, [pc, #52]	; (800061c <GPIO_IRQInterruptCongif+0x50>)
 80005e8:	681a      	ldr	r2, [r3, #0]
 80005ea:	1dfb      	adds	r3, r7, #7
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	2101      	movs	r1, #1
 80005f0:	4099      	lsls	r1, r3
 80005f2:	000b      	movs	r3, r1
 80005f4:	0019      	movs	r1, r3
 80005f6:	4b09      	ldr	r3, [pc, #36]	; (800061c <GPIO_IRQInterruptCongif+0x50>)
 80005f8:	430a      	orrs	r2, r1
 80005fa:	601a      	str	r2, [r3, #0]
	} else {
		// program ICER register (Interrupt Clear-Enable Register)
		*NVIC_ICER |= (1 << IRQNumber);
	}
}
 80005fc:	e00a      	b.n	8000614 <GPIO_IRQInterruptCongif+0x48>
		*NVIC_ICER |= (1 << IRQNumber);
 80005fe:	4b08      	ldr	r3, [pc, #32]	; (8000620 <GPIO_IRQInterruptCongif+0x54>)
 8000600:	681a      	ldr	r2, [r3, #0]
 8000602:	1dfb      	adds	r3, r7, #7
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	2101      	movs	r1, #1
 8000608:	4099      	lsls	r1, r3
 800060a:	000b      	movs	r3, r1
 800060c:	0019      	movs	r1, r3
 800060e:	4b04      	ldr	r3, [pc, #16]	; (8000620 <GPIO_IRQInterruptCongif+0x54>)
 8000610:	430a      	orrs	r2, r1
 8000612:	601a      	str	r2, [r3, #0]
}
 8000614:	46c0      	nop			; (mov r8, r8)
 8000616:	46bd      	mov	sp, r7
 8000618:	b002      	add	sp, #8
 800061a:	bd80      	pop	{r7, pc}
 800061c:	e000e100 	.word	0xe000e100
 8000620:	e000e180 	.word	0xe000e180

08000624 <GPIO_IRQHandling>:

void GPIO_IRQHandling(uint8_t PinNumber)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
 800062a:	0002      	movs	r2, r0
 800062c:	1dfb      	adds	r3, r7, #7
 800062e:	701a      	strb	r2, [r3, #0]
	// clear the EXTO pending register corresponding to the pin number
	if (EXTI->PR & (1 << PinNumber)) {
 8000630:	4b0b      	ldr	r3, [pc, #44]	; (8000660 <GPIO_IRQHandling+0x3c>)
 8000632:	695b      	ldr	r3, [r3, #20]
 8000634:	1dfa      	adds	r2, r7, #7
 8000636:	7812      	ldrb	r2, [r2, #0]
 8000638:	2101      	movs	r1, #1
 800063a:	4091      	lsls	r1, r2
 800063c:	000a      	movs	r2, r1
 800063e:	4013      	ands	r3, r2
 8000640:	d00a      	beq.n	8000658 <GPIO_IRQHandling+0x34>
		EXTI->PR |= (1 << PinNumber);
 8000642:	4b07      	ldr	r3, [pc, #28]	; (8000660 <GPIO_IRQHandling+0x3c>)
 8000644:	695a      	ldr	r2, [r3, #20]
 8000646:	1dfb      	adds	r3, r7, #7
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	2101      	movs	r1, #1
 800064c:	4099      	lsls	r1, r3
 800064e:	000b      	movs	r3, r1
 8000650:	0019      	movs	r1, r3
 8000652:	4b03      	ldr	r3, [pc, #12]	; (8000660 <GPIO_IRQHandling+0x3c>)
 8000654:	430a      	orrs	r2, r1
 8000656:	615a      	str	r2, [r3, #20]
	}
}
 8000658:	46c0      	nop			; (mov r8, r8)
 800065a:	46bd      	mov	sp, r7
 800065c:	b002      	add	sp, #8
 800065e:	bd80      	pop	{r7, pc}
 8000660:	40010400 	.word	0x40010400

08000664 <GPIO_IRQPriorityConfig>:

void GPIO_IRQPriorityConfig(uint8_t IRQNumber, uint32_t IRQPriority)
{
 8000664:	b590      	push	{r4, r7, lr}
 8000666:	b085      	sub	sp, #20
 8000668:	af00      	add	r7, sp, #0
 800066a:	0002      	movs	r2, r0
 800066c:	6039      	str	r1, [r7, #0]
 800066e:	1dfb      	adds	r3, r7, #7
 8000670:	701a      	strb	r2, [r3, #0]
	// 1. Find IPR register
	uint8_t iprx = IRQNumber / 4;
 8000672:	200f      	movs	r0, #15
 8000674:	183b      	adds	r3, r7, r0
 8000676:	1dfa      	adds	r2, r7, #7
 8000678:	7812      	ldrb	r2, [r2, #0]
 800067a:	0892      	lsrs	r2, r2, #2
 800067c:	701a      	strb	r2, [r3, #0]
	uint8_t iprx_section = IRQNumber % 4;
 800067e:	240e      	movs	r4, #14
 8000680:	193b      	adds	r3, r7, r4
 8000682:	1dfa      	adds	r2, r7, #7
 8000684:	7812      	ldrb	r2, [r2, #0]
 8000686:	2103      	movs	r1, #3
 8000688:	400a      	ands	r2, r1
 800068a:	701a      	strb	r2, [r3, #0]

	uint8_t shift = (8 * iprx_section) + (8 - NO_PR_BITS_IMPLEMENTED);
 800068c:	193b      	adds	r3, r7, r4
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	00db      	lsls	r3, r3, #3
 8000692:	b2da      	uxtb	r2, r3
 8000694:	240d      	movs	r4, #13
 8000696:	193b      	adds	r3, r7, r4
 8000698:	3204      	adds	r2, #4
 800069a:	701a      	strb	r2, [r3, #0]
	*(NVIC_IPR_BASE_ADDR + iprx) |= (IRQPriority << shift);
 800069c:	183b      	adds	r3, r7, r0
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	009b      	lsls	r3, r3, #2
 80006a2:	4a0a      	ldr	r2, [pc, #40]	; (80006cc <GPIO_IRQPriorityConfig+0x68>)
 80006a4:	4694      	mov	ip, r2
 80006a6:	4463      	add	r3, ip
 80006a8:	6819      	ldr	r1, [r3, #0]
 80006aa:	193b      	adds	r3, r7, r4
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	683a      	ldr	r2, [r7, #0]
 80006b0:	409a      	lsls	r2, r3
 80006b2:	183b      	adds	r3, r7, r0
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	009b      	lsls	r3, r3, #2
 80006b8:	4804      	ldr	r0, [pc, #16]	; (80006cc <GPIO_IRQPriorityConfig+0x68>)
 80006ba:	4684      	mov	ip, r0
 80006bc:	4463      	add	r3, ip
 80006be:	430a      	orrs	r2, r1
 80006c0:	601a      	str	r2, [r3, #0]
}
 80006c2:	46c0      	nop			; (mov r8, r8)
 80006c4:	46bd      	mov	sp, r7
 80006c6:	b005      	add	sp, #20
 80006c8:	bd90      	pop	{r4, r7, pc}
 80006ca:	46c0      	nop			; (mov r8, r8)
 80006cc:	e000e400 	.word	0xe000e400

080006d0 <delay1>:

#include "stm32f051xx.h"
#include "stm32f051xx_gpio_driver.h"

void delay1(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
	for (uint32_t i = 0; i < 500000; i++);
 80006d6:	2300      	movs	r3, #0
 80006d8:	607b      	str	r3, [r7, #4]
 80006da:	e002      	b.n	80006e2 <delay1+0x12>
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	3301      	adds	r3, #1
 80006e0:	607b      	str	r3, [r7, #4]
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	4a03      	ldr	r2, [pc, #12]	; (80006f4 <delay1+0x24>)
 80006e6:	4293      	cmp	r3, r2
 80006e8:	d9f8      	bls.n	80006dc <delay1+0xc>
}
 80006ea:	46c0      	nop			; (mov r8, r8)
 80006ec:	46bd      	mov	sp, r7
 80006ee:	b002      	add	sp, #8
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	46c0      	nop			; (mov r8, r8)
 80006f4:	0007a11f 	.word	0x0007a11f

080006f8 <main>:

int main(void)
{
 80006f8:	b590      	push	{r4, r7, lr}
 80006fa:	b087      	sub	sp, #28
 80006fc:	af00      	add	r7, sp, #0
	GpioLedBlue.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
	GpioLedBlue.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;*/


	GPIO_Handle_t GpioLedGreen;
	memset(&GpioLedGreen, 0, sizeof(GpioLedGreen));
 80006fe:	240c      	movs	r4, #12
 8000700:	193b      	adds	r3, r7, r4
 8000702:	220c      	movs	r2, #12
 8000704:	2100      	movs	r1, #0
 8000706:	0018      	movs	r0, r3
 8000708:	f000 f8a0 	bl	800084c <memset>

	GpioLedGreen.pGPIOx = GPIOC;
 800070c:	193b      	adds	r3, r7, r4
 800070e:	4a1e      	ldr	r2, [pc, #120]	; (8000788 <main+0x90>)
 8000710:	601a      	str	r2, [r3, #0]
	GpioLedGreen.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_9;
 8000712:	193b      	adds	r3, r7, r4
 8000714:	2209      	movs	r2, #9
 8000716:	711a      	strb	r2, [r3, #4]
	GpioLedGreen.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000718:	193b      	adds	r3, r7, r4
 800071a:	2201      	movs	r2, #1
 800071c:	715a      	strb	r2, [r3, #5]
	GpioLedGreen.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;
 800071e:	193b      	adds	r3, r7, r4
 8000720:	2203      	movs	r2, #3
 8000722:	719a      	strb	r2, [r3, #6]
	GpioLedGreen.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000724:	193b      	adds	r3, r7, r4
 8000726:	2200      	movs	r2, #0
 8000728:	721a      	strb	r2, [r3, #8]
	GpioLedGreen.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800072a:	193b      	adds	r3, r7, r4
 800072c:	2200      	movs	r2, #0
 800072e:	71da      	strb	r2, [r3, #7]

	GPIO_Handle_t GpioBtn;
	memset(&GpioBtn, 0, sizeof(GpioBtn));
 8000730:	003b      	movs	r3, r7
 8000732:	220c      	movs	r2, #12
 8000734:	2100      	movs	r1, #0
 8000736:	0018      	movs	r0, r3
 8000738:	f000 f888 	bl	800084c <memset>

	GpioBtn.pGPIOx = GPIOC;
 800073c:	003b      	movs	r3, r7
 800073e:	4a12      	ldr	r2, [pc, #72]	; (8000788 <main+0x90>)
 8000740:	601a      	str	r2, [r3, #0]
	GpioBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_15;
 8000742:	003b      	movs	r3, r7
 8000744:	220f      	movs	r2, #15
 8000746:	711a      	strb	r2, [r3, #4]
	GpioBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IT_FT;
 8000748:	003b      	movs	r3, r7
 800074a:	2204      	movs	r2, #4
 800074c:	715a      	strb	r2, [r3, #5]
	GpioBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;
 800074e:	003b      	movs	r3, r7
 8000750:	2203      	movs	r2, #3
 8000752:	719a      	strb	r2, [r3, #6]
	GpioBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 8000754:	003b      	movs	r3, r7
 8000756:	2201      	movs	r2, #1
 8000758:	71da      	strb	r2, [r3, #7]

	GPIO_PeriClockControl(GPIOC, ENABLE);
 800075a:	4b0b      	ldr	r3, [pc, #44]	; (8000788 <main+0x90>)
 800075c:	2101      	movs	r1, #1
 800075e:	0018      	movs	r0, r3
 8000760:	f7ff fcd2 	bl	8000108 <GPIO_PeriClockControl>
	GPIO_Init(&GpioBtn);
 8000764:	003b      	movs	r3, r7
 8000766:	0018      	movs	r0, r3
 8000768:	f7ff fd80 	bl	800026c <GPIO_Init>
	GPIO_Init(&GpioLedGreen);
 800076c:	193b      	adds	r3, r7, r4
 800076e:	0018      	movs	r0, r3
 8000770:	f7ff fd7c 	bl	800026c <GPIO_Init>

	// IRQ config
	GPIO_IRQPriorityConfig(IRQ_EXTI4_15, NVIC_IRQ_PR15);
 8000774:	210f      	movs	r1, #15
 8000776:	2007      	movs	r0, #7
 8000778:	f7ff ff74 	bl	8000664 <GPIO_IRQPriorityConfig>
	GPIO_IRQInterruptCongif(IRQ_EXTI4_15, ENABLE);
 800077c:	2101      	movs	r1, #1
 800077e:	2007      	movs	r0, #7
 8000780:	f7ff ff24 	bl	80005cc <GPIO_IRQInterruptCongif>
		} else {
			GPIO_WriteToOutputPin(GPIOC, GPIO_PIN_9, 0);
		}
	}*/

	while(1) {}
 8000784:	e7fe      	b.n	8000784 <main+0x8c>
 8000786:	46c0      	nop			; (mov r8, r8)
 8000788:	48000800 	.word	0x48000800

0800078c <EXTI4_15_IRQHandler>:
}

void EXTI4_15_IRQHandler(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
	delay1();
 8000790:	f7ff ff9e 	bl	80006d0 <delay1>
	GPIO_IRQHandling(GPIO_PIN_15);
 8000794:	200f      	movs	r0, #15
 8000796:	f7ff ff45 	bl	8000624 <GPIO_IRQHandling>
	GPIO_ToggleOutputPin(GPIOC, GPIO_PIN_9);
 800079a:	4b04      	ldr	r3, [pc, #16]	; (80007ac <EXTI4_15_IRQHandler+0x20>)
 800079c:	2109      	movs	r1, #9
 800079e:	0018      	movs	r0, r3
 80007a0:	f7ff fefe 	bl	80005a0 <GPIO_ToggleOutputPin>
}
 80007a4:	46c0      	nop			; (mov r8, r8)
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	46c0      	nop			; (mov r8, r8)
 80007ac:	48000800 	.word	0x48000800

080007b0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80007b0:	480d      	ldr	r0, [pc, #52]	; (80007e8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80007b2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007b4:	480d      	ldr	r0, [pc, #52]	; (80007ec <LoopForever+0x6>)
  ldr r1, =_edata
 80007b6:	490e      	ldr	r1, [pc, #56]	; (80007f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007b8:	4a0e      	ldr	r2, [pc, #56]	; (80007f4 <LoopForever+0xe>)
  movs r3, #0
 80007ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007bc:	e002      	b.n	80007c4 <LoopCopyDataInit>

080007be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007c2:	3304      	adds	r3, #4

080007c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007c8:	d3f9      	bcc.n	80007be <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007ca:	4a0b      	ldr	r2, [pc, #44]	; (80007f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007cc:	4c0b      	ldr	r4, [pc, #44]	; (80007fc <LoopForever+0x16>)
  movs r3, #0
 80007ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007d0:	e001      	b.n	80007d6 <LoopFillZerobss>

080007d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007d4:	3204      	adds	r2, #4

080007d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007d8:	d3fb      	bcc.n	80007d2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80007da:	e000      	b.n	80007de <LoopFillZerobss+0x8>
 80007dc:	bf00      	nop
/* Call static constructors */
  bl __libc_init_array
 80007de:	f000 f811 	bl	8000804 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007e2:	f7ff ff89 	bl	80006f8 <main>

080007e6 <LoopForever>:

LoopForever:
    b LoopForever
 80007e6:	e7fe      	b.n	80007e6 <LoopForever>
  ldr   r0, =_estack
 80007e8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80007ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007f0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80007f4:	0800087c 	.word	0x0800087c
  ldr r2, =_sbss
 80007f8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80007fc:	2000001c 	.word	0x2000001c

08000800 <ADC_COMP_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000800:	e7fe      	b.n	8000800 <ADC_COMP_IRQHandler>
	...

08000804 <__libc_init_array>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	2600      	movs	r6, #0
 8000808:	4d0c      	ldr	r5, [pc, #48]	; (800083c <__libc_init_array+0x38>)
 800080a:	4c0d      	ldr	r4, [pc, #52]	; (8000840 <__libc_init_array+0x3c>)
 800080c:	1b64      	subs	r4, r4, r5
 800080e:	10a4      	asrs	r4, r4, #2
 8000810:	42a6      	cmp	r6, r4
 8000812:	d109      	bne.n	8000828 <__libc_init_array+0x24>
 8000814:	2600      	movs	r6, #0
 8000816:	f000 f821 	bl	800085c <_init>
 800081a:	4d0a      	ldr	r5, [pc, #40]	; (8000844 <__libc_init_array+0x40>)
 800081c:	4c0a      	ldr	r4, [pc, #40]	; (8000848 <__libc_init_array+0x44>)
 800081e:	1b64      	subs	r4, r4, r5
 8000820:	10a4      	asrs	r4, r4, #2
 8000822:	42a6      	cmp	r6, r4
 8000824:	d105      	bne.n	8000832 <__libc_init_array+0x2e>
 8000826:	bd70      	pop	{r4, r5, r6, pc}
 8000828:	00b3      	lsls	r3, r6, #2
 800082a:	58eb      	ldr	r3, [r5, r3]
 800082c:	4798      	blx	r3
 800082e:	3601      	adds	r6, #1
 8000830:	e7ee      	b.n	8000810 <__libc_init_array+0xc>
 8000832:	00b3      	lsls	r3, r6, #2
 8000834:	58eb      	ldr	r3, [r5, r3]
 8000836:	4798      	blx	r3
 8000838:	3601      	adds	r6, #1
 800083a:	e7f2      	b.n	8000822 <__libc_init_array+0x1e>
 800083c:	08000874 	.word	0x08000874
 8000840:	08000874 	.word	0x08000874
 8000844:	08000874 	.word	0x08000874
 8000848:	08000878 	.word	0x08000878

0800084c <memset>:
 800084c:	0003      	movs	r3, r0
 800084e:	1812      	adds	r2, r2, r0
 8000850:	4293      	cmp	r3, r2
 8000852:	d100      	bne.n	8000856 <memset+0xa>
 8000854:	4770      	bx	lr
 8000856:	7019      	strb	r1, [r3, #0]
 8000858:	3301      	adds	r3, #1
 800085a:	e7f9      	b.n	8000850 <memset+0x4>

0800085c <_init>:
 800085c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800085e:	46c0      	nop			; (mov r8, r8)
 8000860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000862:	bc08      	pop	{r3}
 8000864:	469e      	mov	lr, r3
 8000866:	4770      	bx	lr

08000868 <_fini>:
 8000868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800086a:	46c0      	nop			; (mov r8, r8)
 800086c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800086e:	bc08      	pop	{r3}
 8000870:	469e      	mov	lr, r3
 8000872:	4770      	bx	lr
