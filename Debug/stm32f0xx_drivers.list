
stm32f0xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000008f8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  080009b8  080009b8  000109b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080009c4  080009c4  000109cc  2**0
                  CONTENTS
  4 .ARM          00000000  080009c4  080009c4  000109cc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080009c4  080009cc  000109cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080009c4  080009c4  000109c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080009c8  080009c8  000109c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000109cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080009cc  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080009cc  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000109cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000169c  00000000  00000000  000109f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000422  00000000  00000000  00012090  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000138  00000000  00000000  000124b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000100  00000000  00000000  000125f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00001e90  00000000  00000000  000126f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000010c3  00000000  00000000  00014580  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000089db  00000000  00000000  00015643  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0001e01e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000380  00000000  00000000  0001e09c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000000 	.word	0x20000000
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080009a0 	.word	0x080009a0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000004 	.word	0x20000004
 8000104:	080009a0 	.word	0x080009a0

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <GPIO_PeriClockControl>:
 *  @note 					- none
 *
 */

void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnOrDi)
{
 8000118:	b580      	push	{r7, lr}
 800011a:	b082      	sub	sp, #8
 800011c:	af00      	add	r7, sp, #0
 800011e:	6078      	str	r0, [r7, #4]
 8000120:	000a      	movs	r2, r1
 8000122:	1cfb      	adds	r3, r7, #3
 8000124:	701a      	strb	r2, [r3, #0]
	if (EnOrDi == ENABLE) {
 8000126:	1cfb      	adds	r3, r7, #3
 8000128:	781b      	ldrb	r3, [r3, #0]
 800012a:	2b01      	cmp	r3, #1
 800012c:	d148      	bne.n	80001c0 <GPIO_PeriClockControl+0xa8>
		if (pGPIOx == GPIOA) {
 800012e:	687a      	ldr	r2, [r7, #4]
 8000130:	2390      	movs	r3, #144	; 0x90
 8000132:	05db      	lsls	r3, r3, #23
 8000134:	429a      	cmp	r2, r3
 8000136:	d107      	bne.n	8000148 <GPIO_PeriClockControl+0x30>
			GPIOA_PCLK_EN();
 8000138:	4b44      	ldr	r3, [pc, #272]	; (800024c <GPIO_PeriClockControl+0x134>)
 800013a:	695a      	ldr	r2, [r3, #20]
 800013c:	4b43      	ldr	r3, [pc, #268]	; (800024c <GPIO_PeriClockControl+0x134>)
 800013e:	2180      	movs	r1, #128	; 0x80
 8000140:	0289      	lsls	r1, r1, #10
 8000142:	430a      	orrs	r2, r1
 8000144:	615a      	str	r2, [r3, #20]
			GPIOE_PCLK_DI();
		} else if (pGPIOx == GPIOF) {
			GPIOF_PCLK_DI();
		}
	}
}
 8000146:	e07d      	b.n	8000244 <GPIO_PeriClockControl+0x12c>
		} else if (pGPIOx == GPIOB) {
 8000148:	687b      	ldr	r3, [r7, #4]
 800014a:	4a41      	ldr	r2, [pc, #260]	; (8000250 <GPIO_PeriClockControl+0x138>)
 800014c:	4293      	cmp	r3, r2
 800014e:	d107      	bne.n	8000160 <GPIO_PeriClockControl+0x48>
			GPIOB_PCLK_EN();
 8000150:	4b3e      	ldr	r3, [pc, #248]	; (800024c <GPIO_PeriClockControl+0x134>)
 8000152:	695a      	ldr	r2, [r3, #20]
 8000154:	4b3d      	ldr	r3, [pc, #244]	; (800024c <GPIO_PeriClockControl+0x134>)
 8000156:	2180      	movs	r1, #128	; 0x80
 8000158:	02c9      	lsls	r1, r1, #11
 800015a:	430a      	orrs	r2, r1
 800015c:	615a      	str	r2, [r3, #20]
}
 800015e:	e071      	b.n	8000244 <GPIO_PeriClockControl+0x12c>
		} else if (pGPIOx == GPIOC) {
 8000160:	687b      	ldr	r3, [r7, #4]
 8000162:	4a3c      	ldr	r2, [pc, #240]	; (8000254 <GPIO_PeriClockControl+0x13c>)
 8000164:	4293      	cmp	r3, r2
 8000166:	d107      	bne.n	8000178 <GPIO_PeriClockControl+0x60>
			GPIOC_PCLK_EN();
 8000168:	4b38      	ldr	r3, [pc, #224]	; (800024c <GPIO_PeriClockControl+0x134>)
 800016a:	695a      	ldr	r2, [r3, #20]
 800016c:	4b37      	ldr	r3, [pc, #220]	; (800024c <GPIO_PeriClockControl+0x134>)
 800016e:	2180      	movs	r1, #128	; 0x80
 8000170:	0309      	lsls	r1, r1, #12
 8000172:	430a      	orrs	r2, r1
 8000174:	615a      	str	r2, [r3, #20]
}
 8000176:	e065      	b.n	8000244 <GPIO_PeriClockControl+0x12c>
		} else if (pGPIOx == GPIOD) {
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	4a37      	ldr	r2, [pc, #220]	; (8000258 <GPIO_PeriClockControl+0x140>)
 800017c:	4293      	cmp	r3, r2
 800017e:	d107      	bne.n	8000190 <GPIO_PeriClockControl+0x78>
			GPIOD_PCLK_EN();
 8000180:	4b32      	ldr	r3, [pc, #200]	; (800024c <GPIO_PeriClockControl+0x134>)
 8000182:	695a      	ldr	r2, [r3, #20]
 8000184:	4b31      	ldr	r3, [pc, #196]	; (800024c <GPIO_PeriClockControl+0x134>)
 8000186:	2180      	movs	r1, #128	; 0x80
 8000188:	0349      	lsls	r1, r1, #13
 800018a:	430a      	orrs	r2, r1
 800018c:	615a      	str	r2, [r3, #20]
}
 800018e:	e059      	b.n	8000244 <GPIO_PeriClockControl+0x12c>
		} else if (pGPIOx == GPIOE) {
 8000190:	687b      	ldr	r3, [r7, #4]
 8000192:	4a32      	ldr	r2, [pc, #200]	; (800025c <GPIO_PeriClockControl+0x144>)
 8000194:	4293      	cmp	r3, r2
 8000196:	d107      	bne.n	80001a8 <GPIO_PeriClockControl+0x90>
			GPIOE_PCLK_EN();
 8000198:	4b2c      	ldr	r3, [pc, #176]	; (800024c <GPIO_PeriClockControl+0x134>)
 800019a:	695a      	ldr	r2, [r3, #20]
 800019c:	4b2b      	ldr	r3, [pc, #172]	; (800024c <GPIO_PeriClockControl+0x134>)
 800019e:	2180      	movs	r1, #128	; 0x80
 80001a0:	0389      	lsls	r1, r1, #14
 80001a2:	430a      	orrs	r2, r1
 80001a4:	615a      	str	r2, [r3, #20]
}
 80001a6:	e04d      	b.n	8000244 <GPIO_PeriClockControl+0x12c>
		} else if (pGPIOx == GPIOF) {
 80001a8:	687b      	ldr	r3, [r7, #4]
 80001aa:	4a2d      	ldr	r2, [pc, #180]	; (8000260 <GPIO_PeriClockControl+0x148>)
 80001ac:	4293      	cmp	r3, r2
 80001ae:	d149      	bne.n	8000244 <GPIO_PeriClockControl+0x12c>
			GPIOF_PCLK_EN();
 80001b0:	4b26      	ldr	r3, [pc, #152]	; (800024c <GPIO_PeriClockControl+0x134>)
 80001b2:	695a      	ldr	r2, [r3, #20]
 80001b4:	4b25      	ldr	r3, [pc, #148]	; (800024c <GPIO_PeriClockControl+0x134>)
 80001b6:	2180      	movs	r1, #128	; 0x80
 80001b8:	03c9      	lsls	r1, r1, #15
 80001ba:	430a      	orrs	r2, r1
 80001bc:	615a      	str	r2, [r3, #20]
}
 80001be:	e041      	b.n	8000244 <GPIO_PeriClockControl+0x12c>
		if (pGPIOx == GPIOA) {
 80001c0:	687a      	ldr	r2, [r7, #4]
 80001c2:	2390      	movs	r3, #144	; 0x90
 80001c4:	05db      	lsls	r3, r3, #23
 80001c6:	429a      	cmp	r2, r3
 80001c8:	d106      	bne.n	80001d8 <GPIO_PeriClockControl+0xc0>
			GPIOA_PCLK_DI();
 80001ca:	4b20      	ldr	r3, [pc, #128]	; (800024c <GPIO_PeriClockControl+0x134>)
 80001cc:	695a      	ldr	r2, [r3, #20]
 80001ce:	4b1f      	ldr	r3, [pc, #124]	; (800024c <GPIO_PeriClockControl+0x134>)
 80001d0:	4924      	ldr	r1, [pc, #144]	; (8000264 <GPIO_PeriClockControl+0x14c>)
 80001d2:	400a      	ands	r2, r1
 80001d4:	615a      	str	r2, [r3, #20]
}
 80001d6:	e035      	b.n	8000244 <GPIO_PeriClockControl+0x12c>
		} else if (pGPIOx == GPIOB) {
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	4a1d      	ldr	r2, [pc, #116]	; (8000250 <GPIO_PeriClockControl+0x138>)
 80001dc:	4293      	cmp	r3, r2
 80001de:	d106      	bne.n	80001ee <GPIO_PeriClockControl+0xd6>
			GPIOB_PCLK_DI();
 80001e0:	4b1a      	ldr	r3, [pc, #104]	; (800024c <GPIO_PeriClockControl+0x134>)
 80001e2:	695a      	ldr	r2, [r3, #20]
 80001e4:	4b19      	ldr	r3, [pc, #100]	; (800024c <GPIO_PeriClockControl+0x134>)
 80001e6:	4920      	ldr	r1, [pc, #128]	; (8000268 <GPIO_PeriClockControl+0x150>)
 80001e8:	400a      	ands	r2, r1
 80001ea:	615a      	str	r2, [r3, #20]
}
 80001ec:	e02a      	b.n	8000244 <GPIO_PeriClockControl+0x12c>
		} else if (pGPIOx == GPIOC) {
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	4a18      	ldr	r2, [pc, #96]	; (8000254 <GPIO_PeriClockControl+0x13c>)
 80001f2:	4293      	cmp	r3, r2
 80001f4:	d106      	bne.n	8000204 <GPIO_PeriClockControl+0xec>
			GPIOC_PCLK_DI();
 80001f6:	4b15      	ldr	r3, [pc, #84]	; (800024c <GPIO_PeriClockControl+0x134>)
 80001f8:	695a      	ldr	r2, [r3, #20]
 80001fa:	4b14      	ldr	r3, [pc, #80]	; (800024c <GPIO_PeriClockControl+0x134>)
 80001fc:	491b      	ldr	r1, [pc, #108]	; (800026c <GPIO_PeriClockControl+0x154>)
 80001fe:	400a      	ands	r2, r1
 8000200:	615a      	str	r2, [r3, #20]
}
 8000202:	e01f      	b.n	8000244 <GPIO_PeriClockControl+0x12c>
		} else if (pGPIOx == GPIOD) {
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	4a14      	ldr	r2, [pc, #80]	; (8000258 <GPIO_PeriClockControl+0x140>)
 8000208:	4293      	cmp	r3, r2
 800020a:	d106      	bne.n	800021a <GPIO_PeriClockControl+0x102>
			GPIOD_PCLK_DI();
 800020c:	4b0f      	ldr	r3, [pc, #60]	; (800024c <GPIO_PeriClockControl+0x134>)
 800020e:	695a      	ldr	r2, [r3, #20]
 8000210:	4b0e      	ldr	r3, [pc, #56]	; (800024c <GPIO_PeriClockControl+0x134>)
 8000212:	4917      	ldr	r1, [pc, #92]	; (8000270 <GPIO_PeriClockControl+0x158>)
 8000214:	400a      	ands	r2, r1
 8000216:	615a      	str	r2, [r3, #20]
}
 8000218:	e014      	b.n	8000244 <GPIO_PeriClockControl+0x12c>
		} else if (pGPIOx == GPIOE) {
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	4a0f      	ldr	r2, [pc, #60]	; (800025c <GPIO_PeriClockControl+0x144>)
 800021e:	4293      	cmp	r3, r2
 8000220:	d106      	bne.n	8000230 <GPIO_PeriClockControl+0x118>
			GPIOE_PCLK_DI();
 8000222:	4b0a      	ldr	r3, [pc, #40]	; (800024c <GPIO_PeriClockControl+0x134>)
 8000224:	695a      	ldr	r2, [r3, #20]
 8000226:	4b09      	ldr	r3, [pc, #36]	; (800024c <GPIO_PeriClockControl+0x134>)
 8000228:	4912      	ldr	r1, [pc, #72]	; (8000274 <GPIO_PeriClockControl+0x15c>)
 800022a:	400a      	ands	r2, r1
 800022c:	615a      	str	r2, [r3, #20]
}
 800022e:	e009      	b.n	8000244 <GPIO_PeriClockControl+0x12c>
		} else if (pGPIOx == GPIOF) {
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	4a0b      	ldr	r2, [pc, #44]	; (8000260 <GPIO_PeriClockControl+0x148>)
 8000234:	4293      	cmp	r3, r2
 8000236:	d105      	bne.n	8000244 <GPIO_PeriClockControl+0x12c>
			GPIOF_PCLK_DI();
 8000238:	4b04      	ldr	r3, [pc, #16]	; (800024c <GPIO_PeriClockControl+0x134>)
 800023a:	695a      	ldr	r2, [r3, #20]
 800023c:	4b03      	ldr	r3, [pc, #12]	; (800024c <GPIO_PeriClockControl+0x134>)
 800023e:	490e      	ldr	r1, [pc, #56]	; (8000278 <GPIO_PeriClockControl+0x160>)
 8000240:	400a      	ands	r2, r1
 8000242:	615a      	str	r2, [r3, #20]
}
 8000244:	46c0      	nop			; (mov r8, r8)
 8000246:	46bd      	mov	sp, r7
 8000248:	b002      	add	sp, #8
 800024a:	bd80      	pop	{r7, pc}
 800024c:	40021000 	.word	0x40021000
 8000250:	48000400 	.word	0x48000400
 8000254:	48000800 	.word	0x48000800
 8000258:	48000c00 	.word	0x48000c00
 800025c:	48001000 	.word	0x48001000
 8000260:	48001400 	.word	0x48001400
 8000264:	fffdffff 	.word	0xfffdffff
 8000268:	fffbffff 	.word	0xfffbffff
 800026c:	fff7ffff 	.word	0xfff7ffff
 8000270:	ffefffff 	.word	0xffefffff
 8000274:	ffdfffff 	.word	0xffdfffff
 8000278:	ffbfffff 	.word	0xffbfffff

0800027c <GPIO_Init>:
 *
 *  @note 					- none
 *
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 800027c:	b5b0      	push	{r4, r5, r7, lr}
 800027e:	b086      	sub	sp, #24
 8000280:	af00      	add	r7, sp, #0
 8000282:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0;
 8000284:	2300      	movs	r3, #0
 8000286:	617b      	str	r3, [r7, #20]

	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	2101      	movs	r1, #1
 800028e:	0018      	movs	r0, r3
 8000290:	f7ff ff42 	bl	8000118 <GPIO_PeriClockControl>

	// 1. Configure the mode of GPIO pin
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	795b      	ldrb	r3, [r3, #5]
 8000298:	2b03      	cmp	r3, #3
 800029a:	d81f      	bhi.n	80002dc <GPIO_Init+0x60>
	{
		// the non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	795b      	ldrb	r3, [r3, #5]
 80002a0:	001a      	movs	r2, r3
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	791b      	ldrb	r3, [r3, #4]
 80002a6:	005b      	lsls	r3, r3, #1
 80002a8:	409a      	lsls	r2, r3
 80002aa:	0013      	movs	r3, r2
 80002ac:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	681a      	ldr	r2, [r3, #0]
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	791b      	ldrb	r3, [r3, #4]
 80002b8:	0019      	movs	r1, r3
 80002ba:	2303      	movs	r3, #3
 80002bc:	408b      	lsls	r3, r1
 80002be:	43db      	mvns	r3, r3
 80002c0:	0019      	movs	r1, r3
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	400a      	ands	r2, r1
 80002c8:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	6819      	ldr	r1, [r3, #0]
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	697a      	ldr	r2, [r7, #20]
 80002d6:	430a      	orrs	r2, r1
 80002d8:	601a      	str	r2, [r3, #0]
 80002da:	e0b5      	b.n	8000448 <GPIO_Init+0x1cc>
	}
	else
	{
		if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	795b      	ldrb	r3, [r3, #5]
 80002e0:	2b04      	cmp	r3, #4
 80002e2:	d117      	bne.n	8000314 <GPIO_Init+0x98>
		{
			// 1. Configure FTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80002e4:	4bad      	ldr	r3, [pc, #692]	; (800059c <GPIO_Init+0x320>)
 80002e6:	68da      	ldr	r2, [r3, #12]
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	791b      	ldrb	r3, [r3, #4]
 80002ec:	0019      	movs	r1, r3
 80002ee:	2301      	movs	r3, #1
 80002f0:	408b      	lsls	r3, r1
 80002f2:	0019      	movs	r1, r3
 80002f4:	4ba9      	ldr	r3, [pc, #676]	; (800059c <GPIO_Init+0x320>)
 80002f6:	430a      	orrs	r2, r1
 80002f8:	60da      	str	r2, [r3, #12]
			// 1.1 But clean Rising TSR
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80002fa:	4ba8      	ldr	r3, [pc, #672]	; (800059c <GPIO_Init+0x320>)
 80002fc:	689a      	ldr	r2, [r3, #8]
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	791b      	ldrb	r3, [r3, #4]
 8000302:	0019      	movs	r1, r3
 8000304:	2301      	movs	r3, #1
 8000306:	408b      	lsls	r3, r1
 8000308:	43db      	mvns	r3, r3
 800030a:	0019      	movs	r1, r3
 800030c:	4ba3      	ldr	r3, [pc, #652]	; (800059c <GPIO_Init+0x320>)
 800030e:	400a      	ands	r2, r1
 8000310:	609a      	str	r2, [r3, #8]
 8000312:	e035      	b.n	8000380 <GPIO_Init+0x104>
		}
		else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	795b      	ldrb	r3, [r3, #5]
 8000318:	2b05      	cmp	r3, #5
 800031a:	d117      	bne.n	800034c <GPIO_Init+0xd0>
		{
			// 1. Configure RTSR
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800031c:	4b9f      	ldr	r3, [pc, #636]	; (800059c <GPIO_Init+0x320>)
 800031e:	689a      	ldr	r2, [r3, #8]
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	791b      	ldrb	r3, [r3, #4]
 8000324:	0019      	movs	r1, r3
 8000326:	2301      	movs	r3, #1
 8000328:	408b      	lsls	r3, r1
 800032a:	0019      	movs	r1, r3
 800032c:	4b9b      	ldr	r3, [pc, #620]	; (800059c <GPIO_Init+0x320>)
 800032e:	430a      	orrs	r2, r1
 8000330:	609a      	str	r2, [r3, #8]
			// 1.1 But clean Falling TSR
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000332:	4b9a      	ldr	r3, [pc, #616]	; (800059c <GPIO_Init+0x320>)
 8000334:	68da      	ldr	r2, [r3, #12]
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	791b      	ldrb	r3, [r3, #4]
 800033a:	0019      	movs	r1, r3
 800033c:	2301      	movs	r3, #1
 800033e:	408b      	lsls	r3, r1
 8000340:	43db      	mvns	r3, r3
 8000342:	0019      	movs	r1, r3
 8000344:	4b95      	ldr	r3, [pc, #596]	; (800059c <GPIO_Init+0x320>)
 8000346:	400a      	ands	r2, r1
 8000348:	60da      	str	r2, [r3, #12]
 800034a:	e019      	b.n	8000380 <GPIO_Init+0x104>
		}
		else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	795b      	ldrb	r3, [r3, #5]
 8000350:	2b06      	cmp	r3, #6
 8000352:	d115      	bne.n	8000380 <GPIO_Init+0x104>
		{
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000354:	4b91      	ldr	r3, [pc, #580]	; (800059c <GPIO_Init+0x320>)
 8000356:	68da      	ldr	r2, [r3, #12]
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	791b      	ldrb	r3, [r3, #4]
 800035c:	0019      	movs	r1, r3
 800035e:	2301      	movs	r3, #1
 8000360:	408b      	lsls	r3, r1
 8000362:	0019      	movs	r1, r3
 8000364:	4b8d      	ldr	r3, [pc, #564]	; (800059c <GPIO_Init+0x320>)
 8000366:	430a      	orrs	r2, r1
 8000368:	60da      	str	r2, [r3, #12]
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800036a:	4b8c      	ldr	r3, [pc, #560]	; (800059c <GPIO_Init+0x320>)
 800036c:	689a      	ldr	r2, [r3, #8]
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	791b      	ldrb	r3, [r3, #4]
 8000372:	0019      	movs	r1, r3
 8000374:	2301      	movs	r3, #1
 8000376:	408b      	lsls	r3, r1
 8000378:	0019      	movs	r1, r3
 800037a:	4b88      	ldr	r3, [pc, #544]	; (800059c <GPIO_Init+0x320>)
 800037c:	430a      	orrs	r2, r1
 800037e:	609a      	str	r2, [r3, #8]
		}

		// 2. Configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	791a      	ldrb	r2, [r3, #4]
 8000384:	2313      	movs	r3, #19
 8000386:	18fb      	adds	r3, r7, r3
 8000388:	0892      	lsrs	r2, r2, #2
 800038a:	701a      	strb	r2, [r3, #0]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	791a      	ldrb	r2, [r3, #4]
 8000390:	2312      	movs	r3, #18
 8000392:	18fb      	adds	r3, r7, r3
 8000394:	2103      	movs	r1, #3
 8000396:	400a      	ands	r2, r1
 8000398:	701a      	strb	r2, [r3, #0]
		uint8_t portCode = GPIO_BASE_ADDR_TO_PORT_CODE(pGPIOHandle->pGPIOx);
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	681a      	ldr	r2, [r3, #0]
 800039e:	2390      	movs	r3, #144	; 0x90
 80003a0:	05db      	lsls	r3, r3, #23
 80003a2:	429a      	cmp	r2, r3
 80003a4:	d024      	beq.n	80003f0 <GPIO_Init+0x174>
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	4a7d      	ldr	r2, [pc, #500]	; (80005a0 <GPIO_Init+0x324>)
 80003ac:	4293      	cmp	r3, r2
 80003ae:	d01d      	beq.n	80003ec <GPIO_Init+0x170>
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	4a7b      	ldr	r2, [pc, #492]	; (80005a4 <GPIO_Init+0x328>)
 80003b6:	4293      	cmp	r3, r2
 80003b8:	d016      	beq.n	80003e8 <GPIO_Init+0x16c>
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	4a7a      	ldr	r2, [pc, #488]	; (80005a8 <GPIO_Init+0x32c>)
 80003c0:	4293      	cmp	r3, r2
 80003c2:	d00f      	beq.n	80003e4 <GPIO_Init+0x168>
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	4a78      	ldr	r2, [pc, #480]	; (80005ac <GPIO_Init+0x330>)
 80003ca:	4293      	cmp	r3, r2
 80003cc:	d008      	beq.n	80003e0 <GPIO_Init+0x164>
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	4a77      	ldr	r2, [pc, #476]	; (80005b0 <GPIO_Init+0x334>)
 80003d4:	4293      	cmp	r3, r2
 80003d6:	d101      	bne.n	80003dc <GPIO_Init+0x160>
 80003d8:	2305      	movs	r3, #5
 80003da:	e00a      	b.n	80003f2 <GPIO_Init+0x176>
 80003dc:	2300      	movs	r3, #0
 80003de:	e008      	b.n	80003f2 <GPIO_Init+0x176>
 80003e0:	2304      	movs	r3, #4
 80003e2:	e006      	b.n	80003f2 <GPIO_Init+0x176>
 80003e4:	2303      	movs	r3, #3
 80003e6:	e004      	b.n	80003f2 <GPIO_Init+0x176>
 80003e8:	2302      	movs	r3, #2
 80003ea:	e002      	b.n	80003f2 <GPIO_Init+0x176>
 80003ec:	2301      	movs	r3, #1
 80003ee:	e000      	b.n	80003f2 <GPIO_Init+0x176>
 80003f0:	2300      	movs	r3, #0
 80003f2:	2011      	movs	r0, #17
 80003f4:	183a      	adds	r2, r7, r0
 80003f6:	7013      	strb	r3, [r2, #0]

		SYSCFG_PCLK_EN();
 80003f8:	4b6e      	ldr	r3, [pc, #440]	; (80005b4 <GPIO_Init+0x338>)
 80003fa:	699a      	ldr	r2, [r3, #24]
 80003fc:	4b6d      	ldr	r3, [pc, #436]	; (80005b4 <GPIO_Init+0x338>)
 80003fe:	2101      	movs	r1, #1
 8000400:	430a      	orrs	r2, r1
 8000402:	619a      	str	r2, [r3, #24]
		SYSCFG->EXTICR[temp1] |= portCode << (4 * temp2);
 8000404:	4a6c      	ldr	r2, [pc, #432]	; (80005b8 <GPIO_Init+0x33c>)
 8000406:	2413      	movs	r4, #19
 8000408:	193b      	adds	r3, r7, r4
 800040a:	781b      	ldrb	r3, [r3, #0]
 800040c:	3302      	adds	r3, #2
 800040e:	009b      	lsls	r3, r3, #2
 8000410:	589a      	ldr	r2, [r3, r2]
 8000412:	183b      	adds	r3, r7, r0
 8000414:	7819      	ldrb	r1, [r3, #0]
 8000416:	2312      	movs	r3, #18
 8000418:	18fb      	adds	r3, r7, r3
 800041a:	781b      	ldrb	r3, [r3, #0]
 800041c:	009b      	lsls	r3, r3, #2
 800041e:	4099      	lsls	r1, r3
 8000420:	000b      	movs	r3, r1
 8000422:	0018      	movs	r0, r3
 8000424:	4964      	ldr	r1, [pc, #400]	; (80005b8 <GPIO_Init+0x33c>)
 8000426:	193b      	adds	r3, r7, r4
 8000428:	781b      	ldrb	r3, [r3, #0]
 800042a:	4302      	orrs	r2, r0
 800042c:	3302      	adds	r3, #2
 800042e:	009b      	lsls	r3, r3, #2
 8000430:	505a      	str	r2, [r3, r1]

		// 3. Enable the EXTI interrupt delivery using IMR
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000432:	4b5a      	ldr	r3, [pc, #360]	; (800059c <GPIO_Init+0x320>)
 8000434:	681a      	ldr	r2, [r3, #0]
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	791b      	ldrb	r3, [r3, #4]
 800043a:	0019      	movs	r1, r3
 800043c:	2301      	movs	r3, #1
 800043e:	408b      	lsls	r3, r1
 8000440:	0019      	movs	r1, r3
 8000442:	4b56      	ldr	r3, [pc, #344]	; (800059c <GPIO_Init+0x320>)
 8000444:	430a      	orrs	r2, r1
 8000446:	601a      	str	r2, [r3, #0]
	}

	temp = 0;
 8000448:	2300      	movs	r3, #0
 800044a:	617b      	str	r3, [r7, #20]

	// 2. Configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	799b      	ldrb	r3, [r3, #6]
 8000450:	001a      	movs	r2, r3
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	791b      	ldrb	r3, [r3, #4]
 8000456:	005b      	lsls	r3, r3, #1
 8000458:	409a      	lsls	r2, r3
 800045a:	0013      	movs	r3, r2
 800045c:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	689a      	ldr	r2, [r3, #8]
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	791b      	ldrb	r3, [r3, #4]
 8000468:	0019      	movs	r1, r3
 800046a:	2303      	movs	r3, #3
 800046c:	408b      	lsls	r3, r1
 800046e:	43db      	mvns	r3, r3
 8000470:	0019      	movs	r1, r3
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	400a      	ands	r2, r1
 8000478:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	6899      	ldr	r1, [r3, #8]
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	697a      	ldr	r2, [r7, #20]
 8000486:	430a      	orrs	r2, r1
 8000488:	609a      	str	r2, [r3, #8]

	temp = 0;
 800048a:	2300      	movs	r3, #0
 800048c:	617b      	str	r3, [r7, #20]

	// 3. Configure the PUPD settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	79db      	ldrb	r3, [r3, #7]
 8000492:	001a      	movs	r2, r3
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	791b      	ldrb	r3, [r3, #4]
 8000498:	005b      	lsls	r3, r3, #1
 800049a:	409a      	lsls	r2, r3
 800049c:	0013      	movs	r3, r2
 800049e:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	68da      	ldr	r2, [r3, #12]
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	791b      	ldrb	r3, [r3, #4]
 80004aa:	0019      	movs	r1, r3
 80004ac:	2303      	movs	r3, #3
 80004ae:	408b      	lsls	r3, r1
 80004b0:	43db      	mvns	r3, r3
 80004b2:	0019      	movs	r1, r3
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	400a      	ands	r2, r1
 80004ba:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	68d9      	ldr	r1, [r3, #12]
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	697a      	ldr	r2, [r7, #20]
 80004c8:	430a      	orrs	r2, r1
 80004ca:	60da      	str	r2, [r3, #12]

	temp = 0;
 80004cc:	2300      	movs	r3, #0
 80004ce:	617b      	str	r3, [r7, #20]

	// 4. Configure the opttype
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	7a1b      	ldrb	r3, [r3, #8]
 80004d4:	001a      	movs	r2, r3
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	791b      	ldrb	r3, [r3, #4]
 80004da:	409a      	lsls	r2, r3
 80004dc:	0013      	movs	r3, r2
 80004de:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	685a      	ldr	r2, [r3, #4]
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	791b      	ldrb	r3, [r3, #4]
 80004ea:	0019      	movs	r1, r3
 80004ec:	2301      	movs	r3, #1
 80004ee:	408b      	lsls	r3, r1
 80004f0:	43db      	mvns	r3, r3
 80004f2:	0019      	movs	r1, r3
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	400a      	ands	r2, r1
 80004fa:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	6859      	ldr	r1, [r3, #4]
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	697a      	ldr	r2, [r7, #20]
 8000508:	430a      	orrs	r2, r1
 800050a:	605a      	str	r2, [r3, #4]

	temp = 0;
 800050c:	2300      	movs	r3, #0
 800050e:	617b      	str	r3, [r7, #20]

	// 5. Configure the ALTERNATIVE functionality
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN) {
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	795b      	ldrb	r3, [r3, #5]
 8000514:	2b02      	cmp	r3, #2
 8000516:	d13b      	bne.n	8000590 <GPIO_Init+0x314>
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	791a      	ldrb	r2, [r3, #4]
 800051c:	2410      	movs	r4, #16
 800051e:	193b      	adds	r3, r7, r4
 8000520:	08d2      	lsrs	r2, r2, #3
 8000522:	701a      	strb	r2, [r3, #0]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	791a      	ldrb	r2, [r3, #4]
 8000528:	250f      	movs	r5, #15
 800052a:	197b      	adds	r3, r7, r5
 800052c:	2107      	movs	r1, #7
 800052e:	400a      	ands	r2, r1
 8000530:	701a      	strb	r2, [r3, #0]

		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2));
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	193a      	adds	r2, r7, r4
 8000538:	7812      	ldrb	r2, [r2, #0]
 800053a:	3208      	adds	r2, #8
 800053c:	0092      	lsls	r2, r2, #2
 800053e:	58d1      	ldr	r1, [r2, r3]
 8000540:	197b      	adds	r3, r7, r5
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	009b      	lsls	r3, r3, #2
 8000546:	220f      	movs	r2, #15
 8000548:	409a      	lsls	r2, r3
 800054a:	0013      	movs	r3, r2
 800054c:	43db      	mvns	r3, r3
 800054e:	0018      	movs	r0, r3
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	193a      	adds	r2, r7, r4
 8000556:	7812      	ldrb	r2, [r2, #0]
 8000558:	4001      	ands	r1, r0
 800055a:	3208      	adds	r2, #8
 800055c:	0092      	lsls	r2, r2, #2
 800055e:	50d1      	str	r1, [r2, r3]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2));
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	193a      	adds	r2, r7, r4
 8000566:	7812      	ldrb	r2, [r2, #0]
 8000568:	3208      	adds	r2, #8
 800056a:	0092      	lsls	r2, r2, #2
 800056c:	58d1      	ldr	r1, [r2, r3]
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	7a5b      	ldrb	r3, [r3, #9]
 8000572:	001a      	movs	r2, r3
 8000574:	197b      	adds	r3, r7, r5
 8000576:	781b      	ldrb	r3, [r3, #0]
 8000578:	009b      	lsls	r3, r3, #2
 800057a:	409a      	lsls	r2, r3
 800057c:	0013      	movs	r3, r2
 800057e:	0018      	movs	r0, r3
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	193a      	adds	r2, r7, r4
 8000586:	7812      	ldrb	r2, [r2, #0]
 8000588:	4301      	orrs	r1, r0
 800058a:	3208      	adds	r2, #8
 800058c:	0092      	lsls	r2, r2, #2
 800058e:	50d1      	str	r1, [r2, r3]
	}

	temp = 0;
 8000590:	2300      	movs	r3, #0
 8000592:	617b      	str	r3, [r7, #20]
}
 8000594:	46c0      	nop			; (mov r8, r8)
 8000596:	46bd      	mov	sp, r7
 8000598:	b006      	add	sp, #24
 800059a:	bdb0      	pop	{r4, r5, r7, pc}
 800059c:	40010400 	.word	0x40010400
 80005a0:	48000400 	.word	0x48000400
 80005a4:	48000800 	.word	0x48000800
 80005a8:	48000c00 	.word	0x48000c00
 80005ac:	48001000 	.word	0x48001000
 80005b0:	48001400 	.word	0x48001400
 80005b4:	40021000 	.word	0x40021000
 80005b8:	40010000 	.word	0x40010000

080005bc <SPI_PeriClockControl>:

/*
 * Peripheral Clock Setup
 */
void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
 80005c4:	000a      	movs	r2, r1
 80005c6:	1cfb      	adds	r3, r7, #3
 80005c8:	701a      	strb	r2, [r3, #0]
	if (EnOrDi == ENABLE) {
 80005ca:	1cfb      	adds	r3, r7, #3
 80005cc:	781b      	ldrb	r3, [r3, #0]
 80005ce:	2b01      	cmp	r3, #1
 80005d0:	d117      	bne.n	8000602 <SPI_PeriClockControl+0x46>
		if (pSPIx == SPI1) {
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	4a17      	ldr	r2, [pc, #92]	; (8000634 <SPI_PeriClockControl+0x78>)
 80005d6:	4293      	cmp	r3, r2
 80005d8:	d107      	bne.n	80005ea <SPI_PeriClockControl+0x2e>
			SPI1_PCLK_EN();
 80005da:	4b17      	ldr	r3, [pc, #92]	; (8000638 <SPI_PeriClockControl+0x7c>)
 80005dc:	699a      	ldr	r2, [r3, #24]
 80005de:	4b16      	ldr	r3, [pc, #88]	; (8000638 <SPI_PeriClockControl+0x7c>)
 80005e0:	2180      	movs	r1, #128	; 0x80
 80005e2:	0149      	lsls	r1, r1, #5
 80005e4:	430a      	orrs	r2, r1
 80005e6:	619a      	str	r2, [r3, #24]
			SPI1_PCLK_DI();
		} else if (pSPIx == SPI2) {
			SPI2_PCLK_DI();
		}
	}
}
 80005e8:	e020      	b.n	800062c <SPI_PeriClockControl+0x70>
		} else if (pSPIx == SPI2) {
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	4a13      	ldr	r2, [pc, #76]	; (800063c <SPI_PeriClockControl+0x80>)
 80005ee:	4293      	cmp	r3, r2
 80005f0:	d11c      	bne.n	800062c <SPI_PeriClockControl+0x70>
			SPI2_PCLK_EN();
 80005f2:	4b11      	ldr	r3, [pc, #68]	; (8000638 <SPI_PeriClockControl+0x7c>)
 80005f4:	69da      	ldr	r2, [r3, #28]
 80005f6:	4b10      	ldr	r3, [pc, #64]	; (8000638 <SPI_PeriClockControl+0x7c>)
 80005f8:	2180      	movs	r1, #128	; 0x80
 80005fa:	01c9      	lsls	r1, r1, #7
 80005fc:	430a      	orrs	r2, r1
 80005fe:	61da      	str	r2, [r3, #28]
}
 8000600:	e014      	b.n	800062c <SPI_PeriClockControl+0x70>
		if (pSPIx == SPI1) {
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	4a0b      	ldr	r2, [pc, #44]	; (8000634 <SPI_PeriClockControl+0x78>)
 8000606:	4293      	cmp	r3, r2
 8000608:	d106      	bne.n	8000618 <SPI_PeriClockControl+0x5c>
			SPI1_PCLK_DI();
 800060a:	4b0b      	ldr	r3, [pc, #44]	; (8000638 <SPI_PeriClockControl+0x7c>)
 800060c:	699a      	ldr	r2, [r3, #24]
 800060e:	4b0a      	ldr	r3, [pc, #40]	; (8000638 <SPI_PeriClockControl+0x7c>)
 8000610:	490b      	ldr	r1, [pc, #44]	; (8000640 <SPI_PeriClockControl+0x84>)
 8000612:	400a      	ands	r2, r1
 8000614:	619a      	str	r2, [r3, #24]
}
 8000616:	e009      	b.n	800062c <SPI_PeriClockControl+0x70>
		} else if (pSPIx == SPI2) {
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	4a08      	ldr	r2, [pc, #32]	; (800063c <SPI_PeriClockControl+0x80>)
 800061c:	4293      	cmp	r3, r2
 800061e:	d105      	bne.n	800062c <SPI_PeriClockControl+0x70>
			SPI2_PCLK_DI();
 8000620:	4b05      	ldr	r3, [pc, #20]	; (8000638 <SPI_PeriClockControl+0x7c>)
 8000622:	69da      	ldr	r2, [r3, #28]
 8000624:	4b04      	ldr	r3, [pc, #16]	; (8000638 <SPI_PeriClockControl+0x7c>)
 8000626:	4907      	ldr	r1, [pc, #28]	; (8000644 <SPI_PeriClockControl+0x88>)
 8000628:	400a      	ands	r2, r1
 800062a:	61da      	str	r2, [r3, #28]
}
 800062c:	46c0      	nop			; (mov r8, r8)
 800062e:	46bd      	mov	sp, r7
 8000630:	b002      	add	sp, #8
 8000632:	bd80      	pop	{r7, pc}
 8000634:	40013000 	.word	0x40013000
 8000638:	40021000 	.word	0x40021000
 800063c:	40003800 	.word	0x40003800
 8000640:	ffffefff 	.word	0xffffefff
 8000644:	ffffbfff 	.word	0xffffbfff

08000648 <SPI_Init>:

/*
 * Initialization/Deinitialization
 */
void SPI_Init(SPI_Handle_t *pSPIHandle)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b084      	sub	sp, #16
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
	// Configure the SPI_CR1 registers
	uint32_t tempReg = 0;
 8000650:	2300      	movs	r3, #0
 8000652:	60fb      	str	r3, [r7, #12]

	SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	2101      	movs	r1, #1
 800065a:	0018      	movs	r0, r3
 800065c:	f7ff ffae 	bl	80005bc <SPI_PeriClockControl>

	// 1. Configure the device mode
	tempReg |= pSPIHandle->SPIConfig.SPI_DeviceMode << SPI_CR1_MSTR;
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	791b      	ldrb	r3, [r3, #4]
 8000664:	009b      	lsls	r3, r3, #2
 8000666:	001a      	movs	r2, r3
 8000668:	68fb      	ldr	r3, [r7, #12]
 800066a:	4313      	orrs	r3, r2
 800066c:	60fb      	str	r3, [r7, #12]
	// 2. Configure bus config
	if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD) {
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	795b      	ldrb	r3, [r3, #5]
 8000672:	2b01      	cmp	r3, #1
 8000674:	d104      	bne.n	8000680 <SPI_Init+0x38>
		tempReg &= ~(1 << SPI_CR1_BIDIMODE);
 8000676:	68fb      	ldr	r3, [r7, #12]
 8000678:	4a22      	ldr	r2, [pc, #136]	; (8000704 <SPI_Init+0xbc>)
 800067a:	4013      	ands	r3, r2
 800067c:	60fb      	str	r3, [r7, #12]
 800067e:	e016      	b.n	80006ae <SPI_Init+0x66>
	} else if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD) {
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	795b      	ldrb	r3, [r3, #5]
 8000684:	2b02      	cmp	r3, #2
 8000686:	d105      	bne.n	8000694 <SPI_Init+0x4c>
		tempReg |= (1 << SPI_CR1_BIDIMODE);
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	2280      	movs	r2, #128	; 0x80
 800068c:	0212      	lsls	r2, r2, #8
 800068e:	4313      	orrs	r3, r2
 8000690:	60fb      	str	r3, [r7, #12]
 8000692:	e00c      	b.n	80006ae <SPI_Init+0x66>
	} else if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY) {
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	795b      	ldrb	r3, [r3, #5]
 8000698:	2b03      	cmp	r3, #3
 800069a:	d108      	bne.n	80006ae <SPI_Init+0x66>
		tempReg &= ~(1 << SPI_CR1_BIDIMODE);
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	4a19      	ldr	r2, [pc, #100]	; (8000704 <SPI_Init+0xbc>)
 80006a0:	4013      	ands	r3, r2
 80006a2:	60fb      	str	r3, [r7, #12]
		// RxOnly
		tempReg |= (1 << SPI_CR1_RX_ONLY);
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	2280      	movs	r2, #128	; 0x80
 80006a8:	00d2      	lsls	r2, r2, #3
 80006aa:	4313      	orrs	r3, r2
 80006ac:	60fb      	str	r3, [r7, #12]
	}
	// 3. Clock speed
	tempReg |= pSPIHandle->SPIConfig.SPI_SclkSpeed << SPI_CR1_BR;
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	799b      	ldrb	r3, [r3, #6]
 80006b2:	00db      	lsls	r3, r3, #3
 80006b4:	001a      	movs	r2, r3
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	4313      	orrs	r3, r2
 80006ba:	60fb      	str	r3, [r7, #12]
	// 4. DDF(Data size)
	tempReg |= pSPIHandle->SPIConfig.SPI_DDF << SPI_CR1_CRCL;
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	79db      	ldrb	r3, [r3, #7]
 80006c0:	02db      	lsls	r3, r3, #11
 80006c2:	001a      	movs	r2, r3
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	4313      	orrs	r3, r2
 80006c8:	60fb      	str	r3, [r7, #12]
	// 5. Clock polarity
	tempReg |= pSPIHandle->SPIConfig.SPI_CPOL << SPI_CR1_CPOL;
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	7a1b      	ldrb	r3, [r3, #8]
 80006ce:	005b      	lsls	r3, r3, #1
 80006d0:	001a      	movs	r2, r3
 80006d2:	68fb      	ldr	r3, [r7, #12]
 80006d4:	4313      	orrs	r3, r2
 80006d6:	60fb      	str	r3, [r7, #12]
	// 6. Clock phase
	tempReg |= pSPIHandle->SPIConfig.SPI_CPHA << SPI_CR1_CPHA;
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	7a5b      	ldrb	r3, [r3, #9]
 80006dc:	001a      	movs	r2, r3
 80006de:	68fb      	ldr	r3, [r7, #12]
 80006e0:	4313      	orrs	r3, r2
 80006e2:	60fb      	str	r3, [r7, #12]
	// 7. SSM
	tempReg |= pSPIHandle->SPIConfig.SPI_SSM << SPI_CR1_SSM;
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	7a9b      	ldrb	r3, [r3, #10]
 80006e8:	025b      	lsls	r3, r3, #9
 80006ea:	001a      	movs	r2, r3
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	4313      	orrs	r3, r2
 80006f0:	60fb      	str	r3, [r7, #12]

	pSPIHandle->pSPIx->CR1 = tempReg;
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	68fa      	ldr	r2, [r7, #12]
 80006f8:	601a      	str	r2, [r3, #0]
}
 80006fa:	46c0      	nop			; (mov r8, r8)
 80006fc:	46bd      	mov	sp, r7
 80006fe:	b004      	add	sp, #16
 8000700:	bd80      	pop	{r7, pc}
 8000702:	46c0      	nop			; (mov r8, r8)
 8000704:	ffff7fff 	.word	0xffff7fff

08000708 <SPI_GetSRFlagStatus>:
		SPI2_REG_RESET();
	}
}

uint8_t SPI_GetSRFlagStatus(SPI_RegDef_t *pSPIx, uint32_t FlagName)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
 8000710:	6039      	str	r1, [r7, #0]
	return pSPIx->SR & FlagName;
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	689b      	ldr	r3, [r3, #8]
 8000716:	b2db      	uxtb	r3, r3
 8000718:	683a      	ldr	r2, [r7, #0]
 800071a:	b2d2      	uxtb	r2, r2
 800071c:	4013      	ands	r3, r2
 800071e:	b2db      	uxtb	r3, r3
}
 8000720:	0018      	movs	r0, r3
 8000722:	46bd      	mov	sp, r7
 8000724:	b002      	add	sp, #8
 8000726:	bd80      	pop	{r7, pc}

08000728 <SPI_SendData>:

/*
 * Data send and receive
 */
void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, uint32_t Len)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b084      	sub	sp, #16
 800072c:	af00      	add	r7, sp, #0
 800072e:	60f8      	str	r0, [r7, #12]
 8000730:	60b9      	str	r1, [r7, #8]
 8000732:	607a      	str	r2, [r7, #4]
	if (Len == 0) {
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	2b00      	cmp	r3, #0
 8000738:	d02c      	beq.n	8000794 <SPI_SendData+0x6c>
		return;
	}

	while(Len > 0) {
 800073a:	e027      	b.n	800078c <SPI_SendData+0x64>
		// 1. Wait until TXE is set
		while(SPI_GetSRFlagStatus(pSPIx, SPI_TXE_FLAG) == RESET);
 800073c:	46c0      	nop			; (mov r8, r8)
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	2102      	movs	r1, #2
 8000742:	0018      	movs	r0, r3
 8000744:	f7ff ffe0 	bl	8000708 <SPI_GetSRFlagStatus>
 8000748:	1e03      	subs	r3, r0, #0
 800074a:	d0f8      	beq.n	800073e <SPI_SendData+0x16>

		// 2. Check the DFF bit in CR1
		if (pSPIx->CR1 & (1 << SPI_CR1_CRCL)) {
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	681a      	ldr	r2, [r3, #0]
 8000750:	2380      	movs	r3, #128	; 0x80
 8000752:	011b      	lsls	r3, r3, #4
 8000754:	4013      	ands	r3, r2
 8000756:	d00e      	beq.n	8000776 <SPI_SendData+0x4e>
			// 16 bit
			pSPIx->DR = *((uint16_t*)pTxBuffer);
 8000758:	68bb      	ldr	r3, [r7, #8]
 800075a:	881b      	ldrh	r3, [r3, #0]
 800075c:	001a      	movs	r2, r3
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	60da      	str	r2, [r3, #12]
			Len--;
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	3b01      	subs	r3, #1
 8000766:	607b      	str	r3, [r7, #4]
			Len--;
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	3b01      	subs	r3, #1
 800076c:	607b      	str	r3, [r7, #4]
			(uint16_t*)pTxBuffer++;
 800076e:	68bb      	ldr	r3, [r7, #8]
 8000770:	3301      	adds	r3, #1
 8000772:	60bb      	str	r3, [r7, #8]
 8000774:	e00a      	b.n	800078c <SPI_SendData+0x64>
		} else {
			// 8 bit
			pSPIx->DR = *pTxBuffer;
 8000776:	68bb      	ldr	r3, [r7, #8]
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	001a      	movs	r2, r3
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	60da      	str	r2, [r3, #12]
			Len--;
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	3b01      	subs	r3, #1
 8000784:	607b      	str	r3, [r7, #4]
			pTxBuffer++;
 8000786:	68bb      	ldr	r3, [r7, #8]
 8000788:	3301      	adds	r3, #1
 800078a:	60bb      	str	r3, [r7, #8]
	while(Len > 0) {
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	2b00      	cmp	r3, #0
 8000790:	d1d4      	bne.n	800073c <SPI_SendData+0x14>
 8000792:	e000      	b.n	8000796 <SPI_SendData+0x6e>
		return;
 8000794:	46c0      	nop			; (mov r8, r8)
		}
	}
}
 8000796:	46bd      	mov	sp, r7
 8000798:	b004      	add	sp, #16
 800079a:	bd80      	pop	{r7, pc}

0800079c <SPI_PeripheralControl>:

void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
 80007a4:	000a      	movs	r2, r1
 80007a6:	1cfb      	adds	r3, r7, #3
 80007a8:	701a      	strb	r2, [r3, #0]
	if (EnOrDi == ENABLE) {
 80007aa:	1cfb      	adds	r3, r7, #3
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	2b01      	cmp	r3, #1
 80007b0:	d106      	bne.n	80007c0 <SPI_PeripheralControl+0x24>
		pSPIx->CR1 |= (1 << SPI_CR1_SPE);
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	2240      	movs	r2, #64	; 0x40
 80007b8:	431a      	orrs	r2, r3
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	601a      	str	r2, [r3, #0]
	} else {
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
	}
}
 80007be:	e006      	b.n	80007ce <SPI_PeripheralControl+0x32>
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	2240      	movs	r2, #64	; 0x40
 80007c6:	4393      	bics	r3, r2
 80007c8:	001a      	movs	r2, r3
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	601a      	str	r2, [r3, #0]
}
 80007ce:	46c0      	nop			; (mov r8, r8)
 80007d0:	46bd      	mov	sp, r7
 80007d2:	b002      	add	sp, #8
 80007d4:	bd80      	pop	{r7, pc}
	...

080007d8 <SPI_SSIConfig>:

void SPI_SSIConfig(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
 80007e0:	000a      	movs	r2, r1
 80007e2:	1cfb      	adds	r3, r7, #3
 80007e4:	701a      	strb	r2, [r3, #0]
	if (EnOrDi == ENABLE) {
 80007e6:	1cfb      	adds	r3, r7, #3
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	2b01      	cmp	r3, #1
 80007ec:	d107      	bne.n	80007fe <SPI_SSIConfig+0x26>
		pSPIx->CR1 |= (1 << SPI_CR1_SSI);
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	2280      	movs	r2, #128	; 0x80
 80007f4:	0052      	lsls	r2, r2, #1
 80007f6:	431a      	orrs	r2, r3
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	601a      	str	r2, [r3, #0]
	} else {
		pSPIx->CR1 &= ~(1 << SPI_CR1_SSI);
	}
}
 80007fc:	e005      	b.n	800080a <SPI_SSIConfig+0x32>
		pSPIx->CR1 &= ~(1 << SPI_CR1_SSI);
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	4a04      	ldr	r2, [pc, #16]	; (8000814 <SPI_SSIConfig+0x3c>)
 8000804:	401a      	ands	r2, r3
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	601a      	str	r2, [r3, #0]
}
 800080a:	46c0      	nop			; (mov r8, r8)
 800080c:	46bd      	mov	sp, r7
 800080e:	b002      	add	sp, #8
 8000810:	bd80      	pop	{r7, pc}
 8000812:	46c0      	nop			; (mov r8, r8)
 8000814:	fffffeff 	.word	0xfffffeff

08000818 <SPI2_GPIOInit>:
#include "stm32f051xx_spi_driver.h"
#include "stm32f051xx.h"
#include <string.h>

void SPI2_GPIOInit(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b084      	sub	sp, #16
 800081c:	af00      	add	r7, sp, #0
	GPIO_Handle_t SPIPins;

	// NSS
	SPIPins.pGPIOx = GPIOB;
 800081e:	1d3b      	adds	r3, r7, #4
 8000820:	4a12      	ldr	r2, [pc, #72]	; (800086c <SPI2_GPIOInit+0x54>)
 8000822:	601a      	str	r2, [r3, #0]
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 0;
 8000824:	1d3b      	adds	r3, r7, #4
 8000826:	2200      	movs	r2, #0
 8000828:	725a      	strb	r2, [r3, #9]
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 800082a:	1d3b      	adds	r3, r7, #4
 800082c:	2202      	movs	r2, #2
 800082e:	715a      	strb	r2, [r3, #5]
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_12;
 8000830:	1d3b      	adds	r3, r7, #4
 8000832:	220c      	movs	r2, #12
 8000834:	711a      	strb	r2, [r3, #4]
	SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000836:	1d3b      	adds	r3, r7, #4
 8000838:	2200      	movs	r2, #0
 800083a:	721a      	strb	r2, [r3, #8]
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800083c:	1d3b      	adds	r3, r7, #4
 800083e:	2200      	movs	r2, #0
 8000840:	71da      	strb	r2, [r3, #7]
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;
 8000842:	1d3b      	adds	r3, r7, #4
 8000844:	2203      	movs	r2, #3
 8000846:	719a      	strb	r2, [r3, #6]

	//GPIO_Init(&SPIPins);

	// SCK
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_13;
 8000848:	1d3b      	adds	r3, r7, #4
 800084a:	220d      	movs	r2, #13
 800084c:	711a      	strb	r2, [r3, #4]
	GPIO_Init(&SPIPins);
 800084e:	1d3b      	adds	r3, r7, #4
 8000850:	0018      	movs	r0, r3
 8000852:	f7ff fd13 	bl	800027c <GPIO_Init>
	// MISO
//	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_14;
	//GPIO_Init(&SPIPins);

	// MOSI
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_15;
 8000856:	1d3b      	adds	r3, r7, #4
 8000858:	220f      	movs	r2, #15
 800085a:	711a      	strb	r2, [r3, #4]
	GPIO_Init(&SPIPins);
 800085c:	1d3b      	adds	r3, r7, #4
 800085e:	0018      	movs	r0, r3
 8000860:	f7ff fd0c 	bl	800027c <GPIO_Init>
}
 8000864:	46c0      	nop			; (mov r8, r8)
 8000866:	46bd      	mov	sp, r7
 8000868:	b004      	add	sp, #16
 800086a:	bd80      	pop	{r7, pc}
 800086c:	48000400 	.word	0x48000400

08000870 <SPI2_Init>:

void SPI2_Init()
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b084      	sub	sp, #16
 8000874:	af00      	add	r7, sp, #0
	SPI_Handle_t SPI2Handle;

	SPI2Handle.pSPIx = SPI2;
 8000876:	1d3b      	adds	r3, r7, #4
 8000878:	4a0f      	ldr	r2, [pc, #60]	; (80008b8 <SPI2_Init+0x48>)
 800087a:	601a      	str	r2, [r3, #0]
	SPI2Handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 800087c:	1d3b      	adds	r3, r7, #4
 800087e:	2201      	movs	r2, #1
 8000880:	715a      	strb	r2, [r3, #5]
	SPI2Handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 8000882:	1d3b      	adds	r3, r7, #4
 8000884:	2201      	movs	r2, #1
 8000886:	711a      	strb	r2, [r3, #4]
	SPI2Handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_VID2;
 8000888:	1d3b      	adds	r3, r7, #4
 800088a:	2200      	movs	r2, #0
 800088c:	719a      	strb	r2, [r3, #6]
	SPI2Handle.SPIConfig.SPI_DDF = SPI_DFF_8BITS;
 800088e:	1d3b      	adds	r3, r7, #4
 8000890:	2200      	movs	r2, #0
 8000892:	71da      	strb	r2, [r3, #7]
	SPI2Handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;
 8000894:	1d3b      	adds	r3, r7, #4
 8000896:	2200      	movs	r2, #0
 8000898:	721a      	strb	r2, [r3, #8]
	SPI2Handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;
 800089a:	1d3b      	adds	r3, r7, #4
 800089c:	2200      	movs	r2, #0
 800089e:	725a      	strb	r2, [r3, #9]
	SPI2Handle.SPIConfig.SPI_SSM = SPI_SSM_EN;
 80008a0:	1d3b      	adds	r3, r7, #4
 80008a2:	2201      	movs	r2, #1
 80008a4:	729a      	strb	r2, [r3, #10]

	SPI_Init(&SPI2Handle);
 80008a6:	1d3b      	adds	r3, r7, #4
 80008a8:	0018      	movs	r0, r3
 80008aa:	f7ff fecd 	bl	8000648 <SPI_Init>
}
 80008ae:	46c0      	nop			; (mov r8, r8)
 80008b0:	46bd      	mov	sp, r7
 80008b2:	b004      	add	sp, #16
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	46c0      	nop			; (mov r8, r8)
 80008b8:	40003800 	.word	0x40003800

080008bc <main>:

int main(void)
{
 80008bc:	b590      	push	{r4, r7, lr}
 80008be:	b085      	sub	sp, #20
 80008c0:	af00      	add	r7, sp, #0
	SPI2_GPIOInit();
 80008c2:	f7ff ffa9 	bl	8000818 <SPI2_GPIOInit>
	SPI2_Init();
 80008c6:	f7ff ffd3 	bl	8000870 <SPI2_Init>

	// this makes NSS signal internally high and avoids MODF error
	SPI_SSIConfig(SPI2, ENABLE);
 80008ca:	4b0c      	ldr	r3, [pc, #48]	; (80008fc <main+0x40>)
 80008cc:	2101      	movs	r1, #1
 80008ce:	0018      	movs	r0, r3
 80008d0:	f7ff ff82 	bl	80007d8 <SPI_SSIConfig>

	// enable SPI2 peripheral
	SPI_PeripheralControl(SPI2, ENABLE);
 80008d4:	4b09      	ldr	r3, [pc, #36]	; (80008fc <main+0x40>)
 80008d6:	2101      	movs	r1, #1
 80008d8:	0018      	movs	r0, r3
 80008da:	f7ff ff5f 	bl	800079c <SPI_PeripheralControl>

	char data[] = "Hello Borys";
 80008de:	1d3b      	adds	r3, r7, #4
 80008e0:	4a07      	ldr	r2, [pc, #28]	; (8000900 <main+0x44>)
 80008e2:	ca13      	ldmia	r2!, {r0, r1, r4}
 80008e4:	c313      	stmia	r3!, {r0, r1, r4}
	SPI_SendData(SPI2, (uint8_t *)data, strlen(data));
 80008e6:	1d3b      	adds	r3, r7, #4
 80008e8:	0018      	movs	r0, r3
 80008ea:	f7ff fc0d 	bl	8000108 <strlen>
 80008ee:	0002      	movs	r2, r0
 80008f0:	1d3b      	adds	r3, r7, #4
 80008f2:	4802      	ldr	r0, [pc, #8]	; (80008fc <main+0x40>)
 80008f4:	0019      	movs	r1, r3
 80008f6:	f7ff ff17 	bl	8000728 <SPI_SendData>

	while(1) {}
 80008fa:	e7fe      	b.n	80008fa <main+0x3e>
 80008fc:	40003800 	.word	0x40003800
 8000900:	080009b8 	.word	0x080009b8

08000904 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000904:	480d      	ldr	r0, [pc, #52]	; (800093c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000906:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000908:	480d      	ldr	r0, [pc, #52]	; (8000940 <LoopForever+0x6>)
  ldr r1, =_edata
 800090a:	490e      	ldr	r1, [pc, #56]	; (8000944 <LoopForever+0xa>)
  ldr r2, =_sidata
 800090c:	4a0e      	ldr	r2, [pc, #56]	; (8000948 <LoopForever+0xe>)
  movs r3, #0
 800090e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000910:	e002      	b.n	8000918 <LoopCopyDataInit>

08000912 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000912:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000914:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000916:	3304      	adds	r3, #4

08000918 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000918:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800091a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800091c:	d3f9      	bcc.n	8000912 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800091e:	4a0b      	ldr	r2, [pc, #44]	; (800094c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000920:	4c0b      	ldr	r4, [pc, #44]	; (8000950 <LoopForever+0x16>)
  movs r3, #0
 8000922:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000924:	e001      	b.n	800092a <LoopFillZerobss>

08000926 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000926:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000928:	3204      	adds	r2, #4

0800092a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800092a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800092c:	d3fb      	bcc.n	8000926 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800092e:	e000      	b.n	8000932 <LoopFillZerobss+0x8>
 8000930:	bf00      	nop
/* Call static constructors */
  bl __libc_init_array
 8000932:	f000 f811 	bl	8000958 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000936:	f7ff ffc1 	bl	80008bc <main>

0800093a <LoopForever>:

LoopForever:
    b LoopForever
 800093a:	e7fe      	b.n	800093a <LoopForever>
  ldr   r0, =_estack
 800093c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000940:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000944:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000948:	080009cc 	.word	0x080009cc
  ldr r2, =_sbss
 800094c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000950:	2000001c 	.word	0x2000001c

08000954 <ADC_COMP_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000954:	e7fe      	b.n	8000954 <ADC_COMP_IRQHandler>
	...

08000958 <__libc_init_array>:
 8000958:	b570      	push	{r4, r5, r6, lr}
 800095a:	2600      	movs	r6, #0
 800095c:	4d0c      	ldr	r5, [pc, #48]	; (8000990 <__libc_init_array+0x38>)
 800095e:	4c0d      	ldr	r4, [pc, #52]	; (8000994 <__libc_init_array+0x3c>)
 8000960:	1b64      	subs	r4, r4, r5
 8000962:	10a4      	asrs	r4, r4, #2
 8000964:	42a6      	cmp	r6, r4
 8000966:	d109      	bne.n	800097c <__libc_init_array+0x24>
 8000968:	2600      	movs	r6, #0
 800096a:	f000 f819 	bl	80009a0 <_init>
 800096e:	4d0a      	ldr	r5, [pc, #40]	; (8000998 <__libc_init_array+0x40>)
 8000970:	4c0a      	ldr	r4, [pc, #40]	; (800099c <__libc_init_array+0x44>)
 8000972:	1b64      	subs	r4, r4, r5
 8000974:	10a4      	asrs	r4, r4, #2
 8000976:	42a6      	cmp	r6, r4
 8000978:	d105      	bne.n	8000986 <__libc_init_array+0x2e>
 800097a:	bd70      	pop	{r4, r5, r6, pc}
 800097c:	00b3      	lsls	r3, r6, #2
 800097e:	58eb      	ldr	r3, [r5, r3]
 8000980:	4798      	blx	r3
 8000982:	3601      	adds	r6, #1
 8000984:	e7ee      	b.n	8000964 <__libc_init_array+0xc>
 8000986:	00b3      	lsls	r3, r6, #2
 8000988:	58eb      	ldr	r3, [r5, r3]
 800098a:	4798      	blx	r3
 800098c:	3601      	adds	r6, #1
 800098e:	e7f2      	b.n	8000976 <__libc_init_array+0x1e>
 8000990:	080009c4 	.word	0x080009c4
 8000994:	080009c4 	.word	0x080009c4
 8000998:	080009c4 	.word	0x080009c4
 800099c:	080009c8 	.word	0x080009c8

080009a0 <_init>:
 80009a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009a2:	46c0      	nop			; (mov r8, r8)
 80009a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80009a6:	bc08      	pop	{r3}
 80009a8:	469e      	mov	lr, r3
 80009aa:	4770      	bx	lr

080009ac <_fini>:
 80009ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009ae:	46c0      	nop			; (mov r8, r8)
 80009b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80009b2:	bc08      	pop	{r3}
 80009b4:	469e      	mov	lr, r3
 80009b6:	4770      	bx	lr
